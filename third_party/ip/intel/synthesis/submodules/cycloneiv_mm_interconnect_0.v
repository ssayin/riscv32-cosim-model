// cycloneiv_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 917

`timescale 1 ps / 1 ps
module cycloneiv_mm_interconnect_0 (
		input  wire [1:0]  axi_bridge_0_m0_awid,                                      //                                     axi_bridge_0_m0.awid
		input  wire [31:0] axi_bridge_0_m0_awaddr,                                    //                                                    .awaddr
		input  wire [7:0]  axi_bridge_0_m0_awlen,                                     //                                                    .awlen
		input  wire [2:0]  axi_bridge_0_m0_awsize,                                    //                                                    .awsize
		input  wire [1:0]  axi_bridge_0_m0_awburst,                                   //                                                    .awburst
		input  wire [0:0]  axi_bridge_0_m0_awlock,                                    //                                                    .awlock
		input  wire [3:0]  axi_bridge_0_m0_awcache,                                   //                                                    .awcache
		input  wire [2:0]  axi_bridge_0_m0_awprot,                                    //                                                    .awprot
		input  wire [3:0]  axi_bridge_0_m0_awqos,                                     //                                                    .awqos
		input  wire [3:0]  axi_bridge_0_m0_awregion,                                  //                                                    .awregion
		input  wire        axi_bridge_0_m0_awvalid,                                   //                                                    .awvalid
		output wire        axi_bridge_0_m0_awready,                                   //                                                    .awready
		input  wire [63:0] axi_bridge_0_m0_wdata,                                     //                                                    .wdata
		input  wire [7:0]  axi_bridge_0_m0_wstrb,                                     //                                                    .wstrb
		input  wire        axi_bridge_0_m0_wlast,                                     //                                                    .wlast
		input  wire        axi_bridge_0_m0_wvalid,                                    //                                                    .wvalid
		output wire        axi_bridge_0_m0_wready,                                    //                                                    .wready
		output wire [1:0]  axi_bridge_0_m0_bid,                                       //                                                    .bid
		output wire [1:0]  axi_bridge_0_m0_bresp,                                     //                                                    .bresp
		output wire        axi_bridge_0_m0_bvalid,                                    //                                                    .bvalid
		input  wire        axi_bridge_0_m0_bready,                                    //                                                    .bready
		input  wire [1:0]  axi_bridge_0_m0_arid,                                      //                                                    .arid
		input  wire [31:0] axi_bridge_0_m0_araddr,                                    //                                                    .araddr
		input  wire [7:0]  axi_bridge_0_m0_arlen,                                     //                                                    .arlen
		input  wire [2:0]  axi_bridge_0_m0_arsize,                                    //                                                    .arsize
		input  wire [1:0]  axi_bridge_0_m0_arburst,                                   //                                                    .arburst
		input  wire [0:0]  axi_bridge_0_m0_arlock,                                    //                                                    .arlock
		input  wire [3:0]  axi_bridge_0_m0_arcache,                                   //                                                    .arcache
		input  wire [2:0]  axi_bridge_0_m0_arprot,                                    //                                                    .arprot
		input  wire [3:0]  axi_bridge_0_m0_arqos,                                     //                                                    .arqos
		input  wire [3:0]  axi_bridge_0_m0_arregion,                                  //                                                    .arregion
		input  wire        axi_bridge_0_m0_arvalid,                                   //                                                    .arvalid
		output wire        axi_bridge_0_m0_arready,                                   //                                                    .arready
		output wire [1:0]  axi_bridge_0_m0_rid,                                       //                                                    .rid
		output wire [63:0] axi_bridge_0_m0_rdata,                                     //                                                    .rdata
		output wire [1:0]  axi_bridge_0_m0_rresp,                                     //                                                    .rresp
		output wire        axi_bridge_0_m0_rlast,                                     //                                                    .rlast
		output wire        axi_bridge_0_m0_rvalid,                                    //                                                    .rvalid
		input  wire        axi_bridge_0_m0_rready,                                    //                                                    .rready
		input  wire        altpll_0_c0_clk,                                           //                                         altpll_0_c0.clk
		input  wire        clock_bridge_0_out_clk_clk,                                //                              clock_bridge_0_out_clk.clk
		input  wire        axi_bridge_0_clk_reset_reset_bridge_in_reset_reset,        //        axi_bridge_0_clk_reset_reset_bridge_in_reset.reset
		input  wire        intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset, // intel_onchip_ssram_drw_reset1_reset_bridge_in_reset.reset
		output wire [8:0]  intel_onchip_ssram_drw_s1_address,                         //                           intel_onchip_ssram_drw_s1.address
		output wire        intel_onchip_ssram_drw_s1_write,                           //                                                    .write
		input  wire [63:0] intel_onchip_ssram_drw_s1_readdata,                        //                                                    .readdata
		output wire [63:0] intel_onchip_ssram_drw_s1_writedata,                       //                                                    .writedata
		output wire [7:0]  intel_onchip_ssram_drw_s1_byteenable,                      //                                                    .byteenable
		output wire        intel_onchip_ssram_drw_s1_chipselect,                      //                                                    .chipselect
		output wire        intel_onchip_ssram_drw_s1_clken,                           //                                                    .clken
		output wire [8:0]  intel_onchip_ssram_drw_s2_address,                         //                           intel_onchip_ssram_drw_s2.address
		output wire        intel_onchip_ssram_drw_s2_write,                           //                                                    .write
		input  wire [63:0] intel_onchip_ssram_drw_s2_readdata,                        //                                                    .readdata
		output wire [63:0] intel_onchip_ssram_drw_s2_writedata,                       //                                                    .writedata
		output wire [7:0]  intel_onchip_ssram_drw_s2_byteenable,                      //                                                    .byteenable
		output wire        intel_onchip_ssram_drw_s2_chipselect,                      //                                                    .chipselect
		output wire        intel_onchip_ssram_drw_s2_clken                            //                                                    .clken
	);

	wire    [0:0] axi_bridge_0_m0_translator_m0_ruser;                           // axi_bridge_0_m0_agent:ruser -> axi_bridge_0_m0_translator:m0_ruser
	wire    [0:0] axi_bridge_0_m0_translator_m0_wuser;                           // axi_bridge_0_m0_translator:m0_wuser -> axi_bridge_0_m0_agent:wuser
	wire    [1:0] axi_bridge_0_m0_translator_m0_awburst;                         // axi_bridge_0_m0_translator:m0_awburst -> axi_bridge_0_m0_agent:awburst
	wire    [3:0] axi_bridge_0_m0_translator_m0_arregion;                        // axi_bridge_0_m0_translator:m0_arregion -> axi_bridge_0_m0_agent:arregion
	wire    [0:0] axi_bridge_0_m0_translator_m0_awuser;                          // axi_bridge_0_m0_translator:m0_awuser -> axi_bridge_0_m0_agent:awuser
	wire    [7:0] axi_bridge_0_m0_translator_m0_arlen;                           // axi_bridge_0_m0_translator:m0_arlen -> axi_bridge_0_m0_agent:arlen
	wire    [3:0] axi_bridge_0_m0_translator_m0_arqos;                           // axi_bridge_0_m0_translator:m0_arqos -> axi_bridge_0_m0_agent:arqos
	wire    [7:0] axi_bridge_0_m0_translator_m0_wstrb;                           // axi_bridge_0_m0_translator:m0_wstrb -> axi_bridge_0_m0_agent:wstrb
	wire          axi_bridge_0_m0_translator_m0_wready;                          // axi_bridge_0_m0_agent:wready -> axi_bridge_0_m0_translator:m0_wready
	wire    [1:0] axi_bridge_0_m0_translator_m0_rid;                             // axi_bridge_0_m0_agent:rid -> axi_bridge_0_m0_translator:m0_rid
	wire          axi_bridge_0_m0_translator_m0_rready;                          // axi_bridge_0_m0_translator:m0_rready -> axi_bridge_0_m0_agent:rready
	wire    [7:0] axi_bridge_0_m0_translator_m0_awlen;                           // axi_bridge_0_m0_translator:m0_awlen -> axi_bridge_0_m0_agent:awlen
	wire    [3:0] axi_bridge_0_m0_translator_m0_awqos;                           // axi_bridge_0_m0_translator:m0_awqos -> axi_bridge_0_m0_agent:awqos
	wire    [3:0] axi_bridge_0_m0_translator_m0_arcache;                         // axi_bridge_0_m0_translator:m0_arcache -> axi_bridge_0_m0_agent:arcache
	wire          axi_bridge_0_m0_translator_m0_wvalid;                          // axi_bridge_0_m0_translator:m0_wvalid -> axi_bridge_0_m0_agent:wvalid
	wire   [31:0] axi_bridge_0_m0_translator_m0_araddr;                          // axi_bridge_0_m0_translator:m0_araddr -> axi_bridge_0_m0_agent:araddr
	wire    [2:0] axi_bridge_0_m0_translator_m0_arprot;                          // axi_bridge_0_m0_translator:m0_arprot -> axi_bridge_0_m0_agent:arprot
	wire    [2:0] axi_bridge_0_m0_translator_m0_awprot;                          // axi_bridge_0_m0_translator:m0_awprot -> axi_bridge_0_m0_agent:awprot
	wire   [63:0] axi_bridge_0_m0_translator_m0_wdata;                           // axi_bridge_0_m0_translator:m0_wdata -> axi_bridge_0_m0_agent:wdata
	wire          axi_bridge_0_m0_translator_m0_arvalid;                         // axi_bridge_0_m0_translator:m0_arvalid -> axi_bridge_0_m0_agent:arvalid
	wire    [3:0] axi_bridge_0_m0_translator_m0_awcache;                         // axi_bridge_0_m0_translator:m0_awcache -> axi_bridge_0_m0_agent:awcache
	wire    [1:0] axi_bridge_0_m0_translator_m0_arid;                            // axi_bridge_0_m0_translator:m0_arid -> axi_bridge_0_m0_agent:arid
	wire    [0:0] axi_bridge_0_m0_translator_m0_arlock;                          // axi_bridge_0_m0_translator:m0_arlock -> axi_bridge_0_m0_agent:arlock
	wire    [0:0] axi_bridge_0_m0_translator_m0_awlock;                          // axi_bridge_0_m0_translator:m0_awlock -> axi_bridge_0_m0_agent:awlock
	wire   [31:0] axi_bridge_0_m0_translator_m0_awaddr;                          // axi_bridge_0_m0_translator:m0_awaddr -> axi_bridge_0_m0_agent:awaddr
	wire    [1:0] axi_bridge_0_m0_translator_m0_bresp;                           // axi_bridge_0_m0_agent:bresp -> axi_bridge_0_m0_translator:m0_bresp
	wire          axi_bridge_0_m0_translator_m0_arready;                         // axi_bridge_0_m0_agent:arready -> axi_bridge_0_m0_translator:m0_arready
	wire   [63:0] axi_bridge_0_m0_translator_m0_rdata;                           // axi_bridge_0_m0_agent:rdata -> axi_bridge_0_m0_translator:m0_rdata
	wire          axi_bridge_0_m0_translator_m0_awready;                         // axi_bridge_0_m0_agent:awready -> axi_bridge_0_m0_translator:m0_awready
	wire    [1:0] axi_bridge_0_m0_translator_m0_arburst;                         // axi_bridge_0_m0_translator:m0_arburst -> axi_bridge_0_m0_agent:arburst
	wire    [2:0] axi_bridge_0_m0_translator_m0_arsize;                          // axi_bridge_0_m0_translator:m0_arsize -> axi_bridge_0_m0_agent:arsize
	wire          axi_bridge_0_m0_translator_m0_bready;                          // axi_bridge_0_m0_translator:m0_bready -> axi_bridge_0_m0_agent:bready
	wire          axi_bridge_0_m0_translator_m0_rlast;                           // axi_bridge_0_m0_agent:rlast -> axi_bridge_0_m0_translator:m0_rlast
	wire          axi_bridge_0_m0_translator_m0_wlast;                           // axi_bridge_0_m0_translator:m0_wlast -> axi_bridge_0_m0_agent:wlast
	wire    [3:0] axi_bridge_0_m0_translator_m0_awregion;                        // axi_bridge_0_m0_translator:m0_awregion -> axi_bridge_0_m0_agent:awregion
	wire    [0:0] axi_bridge_0_m0_translator_m0_buser;                           // axi_bridge_0_m0_agent:buser -> axi_bridge_0_m0_translator:m0_buser
	wire    [1:0] axi_bridge_0_m0_translator_m0_rresp;                           // axi_bridge_0_m0_agent:rresp -> axi_bridge_0_m0_translator:m0_rresp
	wire    [1:0] axi_bridge_0_m0_translator_m0_awid;                            // axi_bridge_0_m0_translator:m0_awid -> axi_bridge_0_m0_agent:awid
	wire    [1:0] axi_bridge_0_m0_translator_m0_bid;                             // axi_bridge_0_m0_agent:bid -> axi_bridge_0_m0_translator:m0_bid
	wire          axi_bridge_0_m0_translator_m0_bvalid;                          // axi_bridge_0_m0_agent:bvalid -> axi_bridge_0_m0_translator:m0_bvalid
	wire    [2:0] axi_bridge_0_m0_translator_m0_awsize;                          // axi_bridge_0_m0_translator:m0_awsize -> axi_bridge_0_m0_agent:awsize
	wire          axi_bridge_0_m0_translator_m0_awvalid;                         // axi_bridge_0_m0_translator:m0_awvalid -> axi_bridge_0_m0_agent:awvalid
	wire    [0:0] axi_bridge_0_m0_translator_m0_aruser;                          // axi_bridge_0_m0_translator:m0_aruser -> axi_bridge_0_m0_agent:aruser
	wire          axi_bridge_0_m0_translator_m0_rvalid;                          // axi_bridge_0_m0_agent:rvalid -> axi_bridge_0_m0_translator:m0_rvalid
	wire   [63:0] intel_onchip_ssram_drw_s1_agent_m0_readdata;                   // intel_onchip_ssram_drw_s1_translator:uav_readdata -> intel_onchip_ssram_drw_s1_agent:m0_readdata
	wire          intel_onchip_ssram_drw_s1_agent_m0_waitrequest;                // intel_onchip_ssram_drw_s1_translator:uav_waitrequest -> intel_onchip_ssram_drw_s1_agent:m0_waitrequest
	wire          intel_onchip_ssram_drw_s1_agent_m0_debugaccess;                // intel_onchip_ssram_drw_s1_agent:m0_debugaccess -> intel_onchip_ssram_drw_s1_translator:uav_debugaccess
	wire   [31:0] intel_onchip_ssram_drw_s1_agent_m0_address;                    // intel_onchip_ssram_drw_s1_agent:m0_address -> intel_onchip_ssram_drw_s1_translator:uav_address
	wire    [7:0] intel_onchip_ssram_drw_s1_agent_m0_byteenable;                 // intel_onchip_ssram_drw_s1_agent:m0_byteenable -> intel_onchip_ssram_drw_s1_translator:uav_byteenable
	wire          intel_onchip_ssram_drw_s1_agent_m0_read;                       // intel_onchip_ssram_drw_s1_agent:m0_read -> intel_onchip_ssram_drw_s1_translator:uav_read
	wire          intel_onchip_ssram_drw_s1_agent_m0_readdatavalid;              // intel_onchip_ssram_drw_s1_translator:uav_readdatavalid -> intel_onchip_ssram_drw_s1_agent:m0_readdatavalid
	wire          intel_onchip_ssram_drw_s1_agent_m0_lock;                       // intel_onchip_ssram_drw_s1_agent:m0_lock -> intel_onchip_ssram_drw_s1_translator:uav_lock
	wire   [63:0] intel_onchip_ssram_drw_s1_agent_m0_writedata;                  // intel_onchip_ssram_drw_s1_agent:m0_writedata -> intel_onchip_ssram_drw_s1_translator:uav_writedata
	wire          intel_onchip_ssram_drw_s1_agent_m0_write;                      // intel_onchip_ssram_drw_s1_agent:m0_write -> intel_onchip_ssram_drw_s1_translator:uav_write
	wire    [3:0] intel_onchip_ssram_drw_s1_agent_m0_burstcount;                 // intel_onchip_ssram_drw_s1_agent:m0_burstcount -> intel_onchip_ssram_drw_s1_translator:uav_burstcount
	wire          intel_onchip_ssram_drw_s1_agent_rf_source_valid;               // intel_onchip_ssram_drw_s1_agent:rf_source_valid -> intel_onchip_ssram_drw_s1_agent_rsp_fifo:in_valid
	wire  [158:0] intel_onchip_ssram_drw_s1_agent_rf_source_data;                // intel_onchip_ssram_drw_s1_agent:rf_source_data -> intel_onchip_ssram_drw_s1_agent_rsp_fifo:in_data
	wire          intel_onchip_ssram_drw_s1_agent_rf_source_ready;               // intel_onchip_ssram_drw_s1_agent_rsp_fifo:in_ready -> intel_onchip_ssram_drw_s1_agent:rf_source_ready
	wire          intel_onchip_ssram_drw_s1_agent_rf_source_startofpacket;       // intel_onchip_ssram_drw_s1_agent:rf_source_startofpacket -> intel_onchip_ssram_drw_s1_agent_rsp_fifo:in_startofpacket
	wire          intel_onchip_ssram_drw_s1_agent_rf_source_endofpacket;         // intel_onchip_ssram_drw_s1_agent:rf_source_endofpacket -> intel_onchip_ssram_drw_s1_agent_rsp_fifo:in_endofpacket
	wire          intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_valid;            // intel_onchip_ssram_drw_s1_agent_rsp_fifo:out_valid -> intel_onchip_ssram_drw_s1_agent:rf_sink_valid
	wire  [158:0] intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_data;             // intel_onchip_ssram_drw_s1_agent_rsp_fifo:out_data -> intel_onchip_ssram_drw_s1_agent:rf_sink_data
	wire          intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_ready;            // intel_onchip_ssram_drw_s1_agent:rf_sink_ready -> intel_onchip_ssram_drw_s1_agent_rsp_fifo:out_ready
	wire          intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_startofpacket;    // intel_onchip_ssram_drw_s1_agent_rsp_fifo:out_startofpacket -> intel_onchip_ssram_drw_s1_agent:rf_sink_startofpacket
	wire          intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_endofpacket;      // intel_onchip_ssram_drw_s1_agent_rsp_fifo:out_endofpacket -> intel_onchip_ssram_drw_s1_agent:rf_sink_endofpacket
	wire          intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_valid;          // intel_onchip_ssram_drw_s1_agent:rdata_fifo_src_valid -> intel_onchip_ssram_drw_s1_agent_rdata_fifo:in_valid
	wire   [65:0] intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_data;           // intel_onchip_ssram_drw_s1_agent:rdata_fifo_src_data -> intel_onchip_ssram_drw_s1_agent_rdata_fifo:in_data
	wire          intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_ready;          // intel_onchip_ssram_drw_s1_agent_rdata_fifo:in_ready -> intel_onchip_ssram_drw_s1_agent:rdata_fifo_src_ready
	wire   [63:0] intel_onchip_ssram_drw_s2_agent_m0_readdata;                   // intel_onchip_ssram_drw_s2_translator:uav_readdata -> intel_onchip_ssram_drw_s2_agent:m0_readdata
	wire          intel_onchip_ssram_drw_s2_agent_m0_waitrequest;                // intel_onchip_ssram_drw_s2_translator:uav_waitrequest -> intel_onchip_ssram_drw_s2_agent:m0_waitrequest
	wire          intel_onchip_ssram_drw_s2_agent_m0_debugaccess;                // intel_onchip_ssram_drw_s2_agent:m0_debugaccess -> intel_onchip_ssram_drw_s2_translator:uav_debugaccess
	wire   [31:0] intel_onchip_ssram_drw_s2_agent_m0_address;                    // intel_onchip_ssram_drw_s2_agent:m0_address -> intel_onchip_ssram_drw_s2_translator:uav_address
	wire    [7:0] intel_onchip_ssram_drw_s2_agent_m0_byteenable;                 // intel_onchip_ssram_drw_s2_agent:m0_byteenable -> intel_onchip_ssram_drw_s2_translator:uav_byteenable
	wire          intel_onchip_ssram_drw_s2_agent_m0_read;                       // intel_onchip_ssram_drw_s2_agent:m0_read -> intel_onchip_ssram_drw_s2_translator:uav_read
	wire          intel_onchip_ssram_drw_s2_agent_m0_readdatavalid;              // intel_onchip_ssram_drw_s2_translator:uav_readdatavalid -> intel_onchip_ssram_drw_s2_agent:m0_readdatavalid
	wire          intel_onchip_ssram_drw_s2_agent_m0_lock;                       // intel_onchip_ssram_drw_s2_agent:m0_lock -> intel_onchip_ssram_drw_s2_translator:uav_lock
	wire   [63:0] intel_onchip_ssram_drw_s2_agent_m0_writedata;                  // intel_onchip_ssram_drw_s2_agent:m0_writedata -> intel_onchip_ssram_drw_s2_translator:uav_writedata
	wire          intel_onchip_ssram_drw_s2_agent_m0_write;                      // intel_onchip_ssram_drw_s2_agent:m0_write -> intel_onchip_ssram_drw_s2_translator:uav_write
	wire    [3:0] intel_onchip_ssram_drw_s2_agent_m0_burstcount;                 // intel_onchip_ssram_drw_s2_agent:m0_burstcount -> intel_onchip_ssram_drw_s2_translator:uav_burstcount
	wire          intel_onchip_ssram_drw_s2_agent_rf_source_valid;               // intel_onchip_ssram_drw_s2_agent:rf_source_valid -> intel_onchip_ssram_drw_s2_agent_rsp_fifo:in_valid
	wire  [158:0] intel_onchip_ssram_drw_s2_agent_rf_source_data;                // intel_onchip_ssram_drw_s2_agent:rf_source_data -> intel_onchip_ssram_drw_s2_agent_rsp_fifo:in_data
	wire          intel_onchip_ssram_drw_s2_agent_rf_source_ready;               // intel_onchip_ssram_drw_s2_agent_rsp_fifo:in_ready -> intel_onchip_ssram_drw_s2_agent:rf_source_ready
	wire          intel_onchip_ssram_drw_s2_agent_rf_source_startofpacket;       // intel_onchip_ssram_drw_s2_agent:rf_source_startofpacket -> intel_onchip_ssram_drw_s2_agent_rsp_fifo:in_startofpacket
	wire          intel_onchip_ssram_drw_s2_agent_rf_source_endofpacket;         // intel_onchip_ssram_drw_s2_agent:rf_source_endofpacket -> intel_onchip_ssram_drw_s2_agent_rsp_fifo:in_endofpacket
	wire          intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_valid;            // intel_onchip_ssram_drw_s2_agent_rsp_fifo:out_valid -> intel_onchip_ssram_drw_s2_agent:rf_sink_valid
	wire  [158:0] intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_data;             // intel_onchip_ssram_drw_s2_agent_rsp_fifo:out_data -> intel_onchip_ssram_drw_s2_agent:rf_sink_data
	wire          intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_ready;            // intel_onchip_ssram_drw_s2_agent:rf_sink_ready -> intel_onchip_ssram_drw_s2_agent_rsp_fifo:out_ready
	wire          intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_startofpacket;    // intel_onchip_ssram_drw_s2_agent_rsp_fifo:out_startofpacket -> intel_onchip_ssram_drw_s2_agent:rf_sink_startofpacket
	wire          intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_endofpacket;      // intel_onchip_ssram_drw_s2_agent_rsp_fifo:out_endofpacket -> intel_onchip_ssram_drw_s2_agent:rf_sink_endofpacket
	wire          intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_valid;          // intel_onchip_ssram_drw_s2_agent:rdata_fifo_src_valid -> intel_onchip_ssram_drw_s2_agent_rdata_fifo:in_valid
	wire   [65:0] intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_data;           // intel_onchip_ssram_drw_s2_agent:rdata_fifo_src_data -> intel_onchip_ssram_drw_s2_agent_rdata_fifo:in_data
	wire          intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_ready;          // intel_onchip_ssram_drw_s2_agent_rdata_fifo:in_ready -> intel_onchip_ssram_drw_s2_agent:rdata_fifo_src_ready
	wire          axi_bridge_0_m0_agent_write_cp_valid;                          // axi_bridge_0_m0_agent:write_cp_valid -> router:sink_valid
	wire  [157:0] axi_bridge_0_m0_agent_write_cp_data;                           // axi_bridge_0_m0_agent:write_cp_data -> router:sink_data
	wire          axi_bridge_0_m0_agent_write_cp_ready;                          // router:sink_ready -> axi_bridge_0_m0_agent:write_cp_ready
	wire          axi_bridge_0_m0_agent_write_cp_startofpacket;                  // axi_bridge_0_m0_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          axi_bridge_0_m0_agent_write_cp_endofpacket;                    // axi_bridge_0_m0_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          axi_bridge_0_m0_agent_read_cp_valid;                           // axi_bridge_0_m0_agent:read_cp_valid -> router_001:sink_valid
	wire  [157:0] axi_bridge_0_m0_agent_read_cp_data;                            // axi_bridge_0_m0_agent:read_cp_data -> router_001:sink_data
	wire          axi_bridge_0_m0_agent_read_cp_ready;                           // router_001:sink_ready -> axi_bridge_0_m0_agent:read_cp_ready
	wire          axi_bridge_0_m0_agent_read_cp_startofpacket;                   // axi_bridge_0_m0_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          axi_bridge_0_m0_agent_read_cp_endofpacket;                     // axi_bridge_0_m0_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          intel_onchip_ssram_drw_s1_agent_rp_valid;                      // intel_onchip_ssram_drw_s1_agent:rp_valid -> router_002:sink_valid
	wire  [157:0] intel_onchip_ssram_drw_s1_agent_rp_data;                       // intel_onchip_ssram_drw_s1_agent:rp_data -> router_002:sink_data
	wire          intel_onchip_ssram_drw_s1_agent_rp_ready;                      // router_002:sink_ready -> intel_onchip_ssram_drw_s1_agent:rp_ready
	wire          intel_onchip_ssram_drw_s1_agent_rp_startofpacket;              // intel_onchip_ssram_drw_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          intel_onchip_ssram_drw_s1_agent_rp_endofpacket;                // intel_onchip_ssram_drw_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                          // router_002:src_valid -> rsp_demux:sink_valid
	wire  [157:0] router_002_src_data;                                           // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                          // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                        // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          intel_onchip_ssram_drw_s2_agent_rp_valid;                      // intel_onchip_ssram_drw_s2_agent:rp_valid -> router_003:sink_valid
	wire  [157:0] intel_onchip_ssram_drw_s2_agent_rp_data;                       // intel_onchip_ssram_drw_s2_agent:rp_data -> router_003:sink_data
	wire          intel_onchip_ssram_drw_s2_agent_rp_ready;                      // router_003:sink_ready -> intel_onchip_ssram_drw_s2_agent:rp_ready
	wire          intel_onchip_ssram_drw_s2_agent_rp_startofpacket;              // intel_onchip_ssram_drw_s2_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          intel_onchip_ssram_drw_s2_agent_rp_endofpacket;                // intel_onchip_ssram_drw_s2_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [157:0] router_003_src_data;                                           // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                          // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                        // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> axi_bridge_0_m0_wr_limiter:cmd_sink_valid
	wire  [157:0] router_src_data;                                               // router:src_data -> axi_bridge_0_m0_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                              // axi_bridge_0_m0_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                            // router:src_channel -> axi_bridge_0_m0_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> axi_bridge_0_m0_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> axi_bridge_0_m0_wr_limiter:cmd_sink_endofpacket
	wire  [157:0] axi_bridge_0_m0_wr_limiter_cmd_src_data;                       // axi_bridge_0_m0_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          axi_bridge_0_m0_wr_limiter_cmd_src_ready;                      // cmd_demux:sink_ready -> axi_bridge_0_m0_wr_limiter:cmd_src_ready
	wire    [1:0] axi_bridge_0_m0_wr_limiter_cmd_src_channel;                    // axi_bridge_0_m0_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          axi_bridge_0_m0_wr_limiter_cmd_src_startofpacket;              // axi_bridge_0_m0_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          axi_bridge_0_m0_wr_limiter_cmd_src_endofpacket;                // axi_bridge_0_m0_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> axi_bridge_0_m0_wr_limiter:rsp_sink_valid
	wire  [157:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> axi_bridge_0_m0_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                             // axi_bridge_0_m0_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> axi_bridge_0_m0_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> axi_bridge_0_m0_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> axi_bridge_0_m0_wr_limiter:rsp_sink_endofpacket
	wire          axi_bridge_0_m0_wr_limiter_rsp_src_valid;                      // axi_bridge_0_m0_wr_limiter:rsp_src_valid -> axi_bridge_0_m0_agent:write_rp_valid
	wire  [157:0] axi_bridge_0_m0_wr_limiter_rsp_src_data;                       // axi_bridge_0_m0_wr_limiter:rsp_src_data -> axi_bridge_0_m0_agent:write_rp_data
	wire          axi_bridge_0_m0_wr_limiter_rsp_src_ready;                      // axi_bridge_0_m0_agent:write_rp_ready -> axi_bridge_0_m0_wr_limiter:rsp_src_ready
	wire    [1:0] axi_bridge_0_m0_wr_limiter_rsp_src_channel;                    // axi_bridge_0_m0_wr_limiter:rsp_src_channel -> axi_bridge_0_m0_agent:write_rp_channel
	wire          axi_bridge_0_m0_wr_limiter_rsp_src_startofpacket;              // axi_bridge_0_m0_wr_limiter:rsp_src_startofpacket -> axi_bridge_0_m0_agent:write_rp_startofpacket
	wire          axi_bridge_0_m0_wr_limiter_rsp_src_endofpacket;                // axi_bridge_0_m0_wr_limiter:rsp_src_endofpacket -> axi_bridge_0_m0_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> axi_bridge_0_m0_rd_limiter:cmd_sink_valid
	wire  [157:0] router_001_src_data;                                           // router_001:src_data -> axi_bridge_0_m0_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                          // axi_bridge_0_m0_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                        // router_001:src_channel -> axi_bridge_0_m0_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> axi_bridge_0_m0_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> axi_bridge_0_m0_rd_limiter:cmd_sink_endofpacket
	wire  [157:0] axi_bridge_0_m0_rd_limiter_cmd_src_data;                       // axi_bridge_0_m0_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          axi_bridge_0_m0_rd_limiter_cmd_src_ready;                      // cmd_demux_001:sink_ready -> axi_bridge_0_m0_rd_limiter:cmd_src_ready
	wire    [1:0] axi_bridge_0_m0_rd_limiter_cmd_src_channel;                    // axi_bridge_0_m0_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          axi_bridge_0_m0_rd_limiter_cmd_src_startofpacket;              // axi_bridge_0_m0_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          axi_bridge_0_m0_rd_limiter_cmd_src_endofpacket;                // axi_bridge_0_m0_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                         // rsp_mux_001:src_valid -> axi_bridge_0_m0_rd_limiter:rsp_sink_valid
	wire  [157:0] rsp_mux_001_src_data;                                          // rsp_mux_001:src_data -> axi_bridge_0_m0_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                         // axi_bridge_0_m0_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                       // rsp_mux_001:src_channel -> axi_bridge_0_m0_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                 // rsp_mux_001:src_startofpacket -> axi_bridge_0_m0_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                   // rsp_mux_001:src_endofpacket -> axi_bridge_0_m0_rd_limiter:rsp_sink_endofpacket
	wire          axi_bridge_0_m0_rd_limiter_rsp_src_valid;                      // axi_bridge_0_m0_rd_limiter:rsp_src_valid -> axi_bridge_0_m0_agent:read_rp_valid
	wire  [157:0] axi_bridge_0_m0_rd_limiter_rsp_src_data;                       // axi_bridge_0_m0_rd_limiter:rsp_src_data -> axi_bridge_0_m0_agent:read_rp_data
	wire          axi_bridge_0_m0_rd_limiter_rsp_src_ready;                      // axi_bridge_0_m0_agent:read_rp_ready -> axi_bridge_0_m0_rd_limiter:rsp_src_ready
	wire    [1:0] axi_bridge_0_m0_rd_limiter_rsp_src_channel;                    // axi_bridge_0_m0_rd_limiter:rsp_src_channel -> axi_bridge_0_m0_agent:read_rp_channel
	wire          axi_bridge_0_m0_rd_limiter_rsp_src_startofpacket;              // axi_bridge_0_m0_rd_limiter:rsp_src_startofpacket -> axi_bridge_0_m0_agent:read_rp_startofpacket
	wire          axi_bridge_0_m0_rd_limiter_rsp_src_endofpacket;                // axi_bridge_0_m0_rd_limiter:rsp_src_endofpacket -> axi_bridge_0_m0_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> intel_onchip_ssram_drw_s1_burst_adapter:sink0_valid
	wire  [157:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> intel_onchip_ssram_drw_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                             // intel_onchip_ssram_drw_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> intel_onchip_ssram_drw_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> intel_onchip_ssram_drw_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> intel_onchip_ssram_drw_s1_burst_adapter:sink0_endofpacket
	wire          intel_onchip_ssram_drw_s1_burst_adapter_source0_valid;         // intel_onchip_ssram_drw_s1_burst_adapter:source0_valid -> intel_onchip_ssram_drw_s1_agent:cp_valid
	wire  [157:0] intel_onchip_ssram_drw_s1_burst_adapter_source0_data;          // intel_onchip_ssram_drw_s1_burst_adapter:source0_data -> intel_onchip_ssram_drw_s1_agent:cp_data
	wire          intel_onchip_ssram_drw_s1_burst_adapter_source0_ready;         // intel_onchip_ssram_drw_s1_agent:cp_ready -> intel_onchip_ssram_drw_s1_burst_adapter:source0_ready
	wire    [1:0] intel_onchip_ssram_drw_s1_burst_adapter_source0_channel;       // intel_onchip_ssram_drw_s1_burst_adapter:source0_channel -> intel_onchip_ssram_drw_s1_agent:cp_channel
	wire          intel_onchip_ssram_drw_s1_burst_adapter_source0_startofpacket; // intel_onchip_ssram_drw_s1_burst_adapter:source0_startofpacket -> intel_onchip_ssram_drw_s1_agent:cp_startofpacket
	wire          intel_onchip_ssram_drw_s1_burst_adapter_source0_endofpacket;   // intel_onchip_ssram_drw_s1_burst_adapter:source0_endofpacket -> intel_onchip_ssram_drw_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> intel_onchip_ssram_drw_s2_burst_adapter:sink0_valid
	wire  [157:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> intel_onchip_ssram_drw_s2_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                         // intel_onchip_ssram_drw_s2_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> intel_onchip_ssram_drw_s2_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> intel_onchip_ssram_drw_s2_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> intel_onchip_ssram_drw_s2_burst_adapter:sink0_endofpacket
	wire          intel_onchip_ssram_drw_s2_burst_adapter_source0_valid;         // intel_onchip_ssram_drw_s2_burst_adapter:source0_valid -> intel_onchip_ssram_drw_s2_agent:cp_valid
	wire  [157:0] intel_onchip_ssram_drw_s2_burst_adapter_source0_data;          // intel_onchip_ssram_drw_s2_burst_adapter:source0_data -> intel_onchip_ssram_drw_s2_agent:cp_data
	wire          intel_onchip_ssram_drw_s2_burst_adapter_source0_ready;         // intel_onchip_ssram_drw_s2_agent:cp_ready -> intel_onchip_ssram_drw_s2_burst_adapter:source0_ready
	wire    [1:0] intel_onchip_ssram_drw_s2_burst_adapter_source0_channel;       // intel_onchip_ssram_drw_s2_burst_adapter:source0_channel -> intel_onchip_ssram_drw_s2_agent:cp_channel
	wire          intel_onchip_ssram_drw_s2_burst_adapter_source0_startofpacket; // intel_onchip_ssram_drw_s2_burst_adapter:source0_startofpacket -> intel_onchip_ssram_drw_s2_agent:cp_startofpacket
	wire          intel_onchip_ssram_drw_s2_burst_adapter_source0_endofpacket;   // intel_onchip_ssram_drw_s2_burst_adapter:source0_endofpacket -> intel_onchip_ssram_drw_s2_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> async_fifo:in_valid
	wire  [157:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> async_fifo:in_data
	wire          cmd_demux_src0_ready;                                          // async_fifo:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> async_fifo:in_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> async_fifo:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> async_fifo:in_endofpacket
	wire          async_fifo_out_valid;                                          // async_fifo:out_valid -> cmd_mux:sink0_valid
	wire  [157:0] async_fifo_out_data;                                           // async_fifo:out_data -> cmd_mux:sink0_data
	wire          async_fifo_out_ready;                                          // cmd_mux:sink0_ready -> async_fifo:out_ready
	wire    [1:0] async_fifo_out_channel;                                        // async_fifo:out_channel -> cmd_mux:sink0_channel
	wire          async_fifo_out_startofpacket;                                  // async_fifo:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          async_fifo_out_endofpacket;                                    // async_fifo:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> async_fifo_001:in_valid
	wire  [157:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> async_fifo_001:in_data
	wire          cmd_demux_src1_ready;                                          // async_fifo_001:in_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> async_fifo_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> async_fifo_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> async_fifo_001:in_endofpacket
	wire          async_fifo_001_out_valid;                                      // async_fifo_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [157:0] async_fifo_001_out_data;                                       // async_fifo_001:out_data -> cmd_mux_001:sink0_data
	wire          async_fifo_001_out_ready;                                      // cmd_mux_001:sink0_ready -> async_fifo_001:out_ready
	wire    [1:0] async_fifo_001_out_channel;                                    // async_fifo_001:out_channel -> cmd_mux_001:sink0_channel
	wire          async_fifo_001_out_startofpacket;                              // async_fifo_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          async_fifo_001_out_endofpacket;                                // async_fifo_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                      // cmd_demux_001:src0_valid -> async_fifo_002:in_valid
	wire  [157:0] cmd_demux_001_src0_data;                                       // cmd_demux_001:src0_data -> async_fifo_002:in_data
	wire          cmd_demux_001_src0_ready;                                      // async_fifo_002:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                    // cmd_demux_001:src0_channel -> async_fifo_002:in_channel
	wire          cmd_demux_001_src0_startofpacket;                              // cmd_demux_001:src0_startofpacket -> async_fifo_002:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                // cmd_demux_001:src0_endofpacket -> async_fifo_002:in_endofpacket
	wire          async_fifo_002_out_valid;                                      // async_fifo_002:out_valid -> cmd_mux:sink1_valid
	wire  [157:0] async_fifo_002_out_data;                                       // async_fifo_002:out_data -> cmd_mux:sink1_data
	wire          async_fifo_002_out_ready;                                      // cmd_mux:sink1_ready -> async_fifo_002:out_ready
	wire    [1:0] async_fifo_002_out_channel;                                    // async_fifo_002:out_channel -> cmd_mux:sink1_channel
	wire          async_fifo_002_out_startofpacket;                              // async_fifo_002:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          async_fifo_002_out_endofpacket;                                // async_fifo_002:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                      // cmd_demux_001:src1_valid -> async_fifo_003:in_valid
	wire  [157:0] cmd_demux_001_src1_data;                                       // cmd_demux_001:src1_data -> async_fifo_003:in_data
	wire          cmd_demux_001_src1_ready;                                      // async_fifo_003:in_ready -> cmd_demux_001:src1_ready
	wire    [1:0] cmd_demux_001_src1_channel;                                    // cmd_demux_001:src1_channel -> async_fifo_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                              // cmd_demux_001:src1_startofpacket -> async_fifo_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                // cmd_demux_001:src1_endofpacket -> async_fifo_003:in_endofpacket
	wire          async_fifo_003_out_valid;                                      // async_fifo_003:out_valid -> cmd_mux_001:sink1_valid
	wire  [157:0] async_fifo_003_out_data;                                       // async_fifo_003:out_data -> cmd_mux_001:sink1_data
	wire          async_fifo_003_out_ready;                                      // cmd_mux_001:sink1_ready -> async_fifo_003:out_ready
	wire    [1:0] async_fifo_003_out_channel;                                    // async_fifo_003:out_channel -> cmd_mux_001:sink1_channel
	wire          async_fifo_003_out_startofpacket;                              // async_fifo_003:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          async_fifo_003_out_endofpacket;                                // async_fifo_003:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> async_fifo_004:in_valid
	wire  [157:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> async_fifo_004:in_data
	wire          rsp_demux_src0_ready;                                          // async_fifo_004:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> async_fifo_004:in_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> async_fifo_004:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> async_fifo_004:in_endofpacket
	wire          async_fifo_004_out_valid;                                      // async_fifo_004:out_valid -> rsp_mux:sink0_valid
	wire  [157:0] async_fifo_004_out_data;                                       // async_fifo_004:out_data -> rsp_mux:sink0_data
	wire          async_fifo_004_out_ready;                                      // rsp_mux:sink0_ready -> async_fifo_004:out_ready
	wire    [1:0] async_fifo_004_out_channel;                                    // async_fifo_004:out_channel -> rsp_mux:sink0_channel
	wire          async_fifo_004_out_startofpacket;                              // async_fifo_004:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          async_fifo_004_out_endofpacket;                                // async_fifo_004:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                          // rsp_demux:src1_valid -> async_fifo_005:in_valid
	wire  [157:0] rsp_demux_src1_data;                                           // rsp_demux:src1_data -> async_fifo_005:in_data
	wire          rsp_demux_src1_ready;                                          // async_fifo_005:in_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                        // rsp_demux:src1_channel -> async_fifo_005:in_channel
	wire          rsp_demux_src1_startofpacket;                                  // rsp_demux:src1_startofpacket -> async_fifo_005:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                    // rsp_demux:src1_endofpacket -> async_fifo_005:in_endofpacket
	wire          async_fifo_005_out_valid;                                      // async_fifo_005:out_valid -> rsp_mux_001:sink0_valid
	wire  [157:0] async_fifo_005_out_data;                                       // async_fifo_005:out_data -> rsp_mux_001:sink0_data
	wire          async_fifo_005_out_ready;                                      // rsp_mux_001:sink0_ready -> async_fifo_005:out_ready
	wire    [1:0] async_fifo_005_out_channel;                                    // async_fifo_005:out_channel -> rsp_mux_001:sink0_channel
	wire          async_fifo_005_out_startofpacket;                              // async_fifo_005:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          async_fifo_005_out_endofpacket;                                // async_fifo_005:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> async_fifo_006:in_valid
	wire  [157:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> async_fifo_006:in_data
	wire          rsp_demux_001_src0_ready;                                      // async_fifo_006:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> async_fifo_006:in_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> async_fifo_006:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> async_fifo_006:in_endofpacket
	wire          async_fifo_006_out_valid;                                      // async_fifo_006:out_valid -> rsp_mux:sink1_valid
	wire  [157:0] async_fifo_006_out_data;                                       // async_fifo_006:out_data -> rsp_mux:sink1_data
	wire          async_fifo_006_out_ready;                                      // rsp_mux:sink1_ready -> async_fifo_006:out_ready
	wire    [1:0] async_fifo_006_out_channel;                                    // async_fifo_006:out_channel -> rsp_mux:sink1_channel
	wire          async_fifo_006_out_startofpacket;                              // async_fifo_006:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          async_fifo_006_out_endofpacket;                                // async_fifo_006:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                      // rsp_demux_001:src1_valid -> async_fifo_007:in_valid
	wire  [157:0] rsp_demux_001_src1_data;                                       // rsp_demux_001:src1_data -> async_fifo_007:in_data
	wire          rsp_demux_001_src1_ready;                                      // async_fifo_007:in_ready -> rsp_demux_001:src1_ready
	wire    [1:0] rsp_demux_001_src1_channel;                                    // rsp_demux_001:src1_channel -> async_fifo_007:in_channel
	wire          rsp_demux_001_src1_startofpacket;                              // rsp_demux_001:src1_startofpacket -> async_fifo_007:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                // rsp_demux_001:src1_endofpacket -> async_fifo_007:in_endofpacket
	wire          async_fifo_007_out_valid;                                      // async_fifo_007:out_valid -> rsp_mux_001:sink1_valid
	wire  [157:0] async_fifo_007_out_data;                                       // async_fifo_007:out_data -> rsp_mux_001:sink1_data
	wire          async_fifo_007_out_ready;                                      // rsp_mux_001:sink1_ready -> async_fifo_007:out_ready
	wire    [1:0] async_fifo_007_out_channel;                                    // async_fifo_007:out_channel -> rsp_mux_001:sink1_channel
	wire          async_fifo_007_out_startofpacket;                              // async_fifo_007:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          async_fifo_007_out_endofpacket;                                // async_fifo_007:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [1:0] axi_bridge_0_m0_wr_limiter_cmd_valid_data;                     // axi_bridge_0_m0_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [1:0] axi_bridge_0_m0_rd_limiter_cmd_valid_data;                     // axi_bridge_0_m0_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_valid;          // intel_onchip_ssram_drw_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_data;           // intel_onchip_ssram_drw_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> intel_onchip_ssram_drw_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> intel_onchip_ssram_drw_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> intel_onchip_ssram_drw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // intel_onchip_ssram_drw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> intel_onchip_ssram_drw_s1_agent:rdata_fifo_sink_error
	wire          intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_valid;          // intel_onchip_ssram_drw_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [65:0] intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_data;           // intel_onchip_ssram_drw_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_ready;          // avalon_st_adapter_001:in_0_ready -> intel_onchip_ssram_drw_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                             // avalon_st_adapter_001:out_0_valid -> intel_onchip_ssram_drw_s2_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_001_out_0_data;                              // avalon_st_adapter_001:out_0_data -> intel_onchip_ssram_drw_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                             // intel_onchip_ssram_drw_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                             // avalon_st_adapter_001:out_0_error -> intel_onchip_ssram_drw_s2_agent:rdata_fifo_sink_error

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (2),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (2),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) axi_bridge_0_m0_translator (
		.aclk        (clock_bridge_0_out_clk_clk),                          //       clk.clk
		.aresetn     (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset_n
		.m0_awid     (axi_bridge_0_m0_translator_m0_awid),                  //        m0.awid
		.m0_awaddr   (axi_bridge_0_m0_translator_m0_awaddr),                //          .awaddr
		.m0_awlen    (axi_bridge_0_m0_translator_m0_awlen),                 //          .awlen
		.m0_awsize   (axi_bridge_0_m0_translator_m0_awsize),                //          .awsize
		.m0_awburst  (axi_bridge_0_m0_translator_m0_awburst),               //          .awburst
		.m0_awlock   (axi_bridge_0_m0_translator_m0_awlock),                //          .awlock
		.m0_awcache  (axi_bridge_0_m0_translator_m0_awcache),               //          .awcache
		.m0_awprot   (axi_bridge_0_m0_translator_m0_awprot),                //          .awprot
		.m0_awuser   (axi_bridge_0_m0_translator_m0_awuser),                //          .awuser
		.m0_awqos    (axi_bridge_0_m0_translator_m0_awqos),                 //          .awqos
		.m0_awregion (axi_bridge_0_m0_translator_m0_awregion),              //          .awregion
		.m0_awvalid  (axi_bridge_0_m0_translator_m0_awvalid),               //          .awvalid
		.m0_awready  (axi_bridge_0_m0_translator_m0_awready),               //          .awready
		.m0_wdata    (axi_bridge_0_m0_translator_m0_wdata),                 //          .wdata
		.m0_wstrb    (axi_bridge_0_m0_translator_m0_wstrb),                 //          .wstrb
		.m0_wlast    (axi_bridge_0_m0_translator_m0_wlast),                 //          .wlast
		.m0_wvalid   (axi_bridge_0_m0_translator_m0_wvalid),                //          .wvalid
		.m0_wuser    (axi_bridge_0_m0_translator_m0_wuser),                 //          .wuser
		.m0_wready   (axi_bridge_0_m0_translator_m0_wready),                //          .wready
		.m0_bid      (axi_bridge_0_m0_translator_m0_bid),                   //          .bid
		.m0_bresp    (axi_bridge_0_m0_translator_m0_bresp),                 //          .bresp
		.m0_buser    (axi_bridge_0_m0_translator_m0_buser),                 //          .buser
		.m0_bvalid   (axi_bridge_0_m0_translator_m0_bvalid),                //          .bvalid
		.m0_bready   (axi_bridge_0_m0_translator_m0_bready),                //          .bready
		.m0_arid     (axi_bridge_0_m0_translator_m0_arid),                  //          .arid
		.m0_araddr   (axi_bridge_0_m0_translator_m0_araddr),                //          .araddr
		.m0_arlen    (axi_bridge_0_m0_translator_m0_arlen),                 //          .arlen
		.m0_arsize   (axi_bridge_0_m0_translator_m0_arsize),                //          .arsize
		.m0_arburst  (axi_bridge_0_m0_translator_m0_arburst),               //          .arburst
		.m0_arlock   (axi_bridge_0_m0_translator_m0_arlock),                //          .arlock
		.m0_arcache  (axi_bridge_0_m0_translator_m0_arcache),               //          .arcache
		.m0_arprot   (axi_bridge_0_m0_translator_m0_arprot),                //          .arprot
		.m0_aruser   (axi_bridge_0_m0_translator_m0_aruser),                //          .aruser
		.m0_arqos    (axi_bridge_0_m0_translator_m0_arqos),                 //          .arqos
		.m0_arregion (axi_bridge_0_m0_translator_m0_arregion),              //          .arregion
		.m0_arvalid  (axi_bridge_0_m0_translator_m0_arvalid),               //          .arvalid
		.m0_arready  (axi_bridge_0_m0_translator_m0_arready),               //          .arready
		.m0_rid      (axi_bridge_0_m0_translator_m0_rid),                   //          .rid
		.m0_rdata    (axi_bridge_0_m0_translator_m0_rdata),                 //          .rdata
		.m0_rresp    (axi_bridge_0_m0_translator_m0_rresp),                 //          .rresp
		.m0_rlast    (axi_bridge_0_m0_translator_m0_rlast),                 //          .rlast
		.m0_rvalid   (axi_bridge_0_m0_translator_m0_rvalid),                //          .rvalid
		.m0_rready   (axi_bridge_0_m0_translator_m0_rready),                //          .rready
		.m0_ruser    (axi_bridge_0_m0_translator_m0_ruser),                 //          .ruser
		.s0_awid     (axi_bridge_0_m0_awid),                                //        s0.awid
		.s0_awaddr   (axi_bridge_0_m0_awaddr),                              //          .awaddr
		.s0_awlen    (axi_bridge_0_m0_awlen),                               //          .awlen
		.s0_awsize   (axi_bridge_0_m0_awsize),                              //          .awsize
		.s0_awburst  (axi_bridge_0_m0_awburst),                             //          .awburst
		.s0_awlock   (axi_bridge_0_m0_awlock),                              //          .awlock
		.s0_awcache  (axi_bridge_0_m0_awcache),                             //          .awcache
		.s0_awprot   (axi_bridge_0_m0_awprot),                              //          .awprot
		.s0_awqos    (axi_bridge_0_m0_awqos),                               //          .awqos
		.s0_awregion (axi_bridge_0_m0_awregion),                            //          .awregion
		.s0_awvalid  (axi_bridge_0_m0_awvalid),                             //          .awvalid
		.s0_awready  (axi_bridge_0_m0_awready),                             //          .awready
		.s0_wdata    (axi_bridge_0_m0_wdata),                               //          .wdata
		.s0_wstrb    (axi_bridge_0_m0_wstrb),                               //          .wstrb
		.s0_wlast    (axi_bridge_0_m0_wlast),                               //          .wlast
		.s0_wvalid   (axi_bridge_0_m0_wvalid),                              //          .wvalid
		.s0_wready   (axi_bridge_0_m0_wready),                              //          .wready
		.s0_bid      (axi_bridge_0_m0_bid),                                 //          .bid
		.s0_bresp    (axi_bridge_0_m0_bresp),                               //          .bresp
		.s0_bvalid   (axi_bridge_0_m0_bvalid),                              //          .bvalid
		.s0_bready   (axi_bridge_0_m0_bready),                              //          .bready
		.s0_arid     (axi_bridge_0_m0_arid),                                //          .arid
		.s0_araddr   (axi_bridge_0_m0_araddr),                              //          .araddr
		.s0_arlen    (axi_bridge_0_m0_arlen),                               //          .arlen
		.s0_arsize   (axi_bridge_0_m0_arsize),                              //          .arsize
		.s0_arburst  (axi_bridge_0_m0_arburst),                             //          .arburst
		.s0_arlock   (axi_bridge_0_m0_arlock),                              //          .arlock
		.s0_arcache  (axi_bridge_0_m0_arcache),                             //          .arcache
		.s0_arprot   (axi_bridge_0_m0_arprot),                              //          .arprot
		.s0_arqos    (axi_bridge_0_m0_arqos),                               //          .arqos
		.s0_arregion (axi_bridge_0_m0_arregion),                            //          .arregion
		.s0_arvalid  (axi_bridge_0_m0_arvalid),                             //          .arvalid
		.s0_arready  (axi_bridge_0_m0_arready),                             //          .arready
		.s0_rid      (axi_bridge_0_m0_rid),                                 //          .rid
		.s0_rdata    (axi_bridge_0_m0_rdata),                               //          .rdata
		.s0_rresp    (axi_bridge_0_m0_rresp),                               //          .rresp
		.s0_rlast    (axi_bridge_0_m0_rlast),                               //          .rlast
		.s0_rvalid   (axi_bridge_0_m0_rvalid),                              //          .rvalid
		.s0_rready   (axi_bridge_0_m0_rready),                              //          .rready
		.s0_awuser   (1'b0),                                                // (terminated)
		.s0_wuser    (1'b0),                                                // (terminated)
		.s0_buser    (),                                                    // (terminated)
		.s0_aruser   (1'b0),                                                // (terminated)
		.s0_ruser    (),                                                    // (terminated)
		.s0_wid      (2'b00),                                               // (terminated)
		.m0_wid      ()                                                     // (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intel_onchip_ssram_drw_s1_translator (
		.clk                    (altpll_0_c0_clk),                                           //                      clk.clk
		.reset                  (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (intel_onchip_ssram_drw_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (intel_onchip_ssram_drw_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (intel_onchip_ssram_drw_s1_agent_m0_read),                   //                         .read
		.uav_write              (intel_onchip_ssram_drw_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (intel_onchip_ssram_drw_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (intel_onchip_ssram_drw_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (intel_onchip_ssram_drw_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (intel_onchip_ssram_drw_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (intel_onchip_ssram_drw_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (intel_onchip_ssram_drw_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (intel_onchip_ssram_drw_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (intel_onchip_ssram_drw_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (intel_onchip_ssram_drw_s1_write),                           //                         .write
		.av_readdata            (intel_onchip_ssram_drw_s1_readdata),                        //                         .readdata
		.av_writedata           (intel_onchip_ssram_drw_s1_writedata),                       //                         .writedata
		.av_byteenable          (intel_onchip_ssram_drw_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (intel_onchip_ssram_drw_s1_chipselect),                      //                         .chipselect
		.av_clken               (intel_onchip_ssram_drw_s1_clken),                           //                         .clken
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intel_onchip_ssram_drw_s2_translator (
		.clk                    (altpll_0_c0_clk),                                           //                      clk.clk
		.reset                  (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (intel_onchip_ssram_drw_s2_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (intel_onchip_ssram_drw_s2_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (intel_onchip_ssram_drw_s2_agent_m0_read),                   //                         .read
		.uav_write              (intel_onchip_ssram_drw_s2_agent_m0_write),                  //                         .write
		.uav_waitrequest        (intel_onchip_ssram_drw_s2_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (intel_onchip_ssram_drw_s2_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (intel_onchip_ssram_drw_s2_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (intel_onchip_ssram_drw_s2_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (intel_onchip_ssram_drw_s2_agent_m0_writedata),              //                         .writedata
		.uav_lock               (intel_onchip_ssram_drw_s2_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (intel_onchip_ssram_drw_s2_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (intel_onchip_ssram_drw_s2_address),                         //      avalon_anti_slave_0.address
		.av_write               (intel_onchip_ssram_drw_s2_write),                           //                         .write
		.av_readdata            (intel_onchip_ssram_drw_s2_readdata),                        //                         .readdata
		.av_writedata           (intel_onchip_ssram_drw_s2_writedata),                       //                         .writedata
		.av_byteenable          (intel_onchip_ssram_drw_s2_byteenable),                      //                         .byteenable
		.av_chipselect          (intel_onchip_ssram_drw_s2_chipselect),                      //                         .chipselect
		.av_clken               (intel_onchip_ssram_drw_s2_clken),                           //                         .clken
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (2),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (137),
		.PKT_CACHE_H               (152),
		.PKT_CACHE_L               (149),
		.PKT_ADDR_SIDEBAND_H       (135),
		.PKT_ADDR_SIDEBAND_L       (135),
		.PKT_PROTECTION_H          (148),
		.PKT_PROTECTION_L          (146),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_RESPONSE_STATUS_L     (153),
		.PKT_RESPONSE_STATUS_H     (154),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_THREAD_ID_H           (145),
		.PKT_THREAD_ID_L           (144),
		.PKT_QOS_L                 (138),
		.PKT_QOS_H                 (141),
		.PKT_ORI_BURST_SIZE_L      (155),
		.PKT_ORI_BURST_SIZE_H      (157),
		.PKT_DATA_SIDEBAND_H       (136),
		.PKT_DATA_SIDEBAND_L       (136),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) axi_bridge_0_m0_agent (
		.aclk                   (clock_bridge_0_out_clk_clk),                          //              clk.clk
		.aresetn                (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (axi_bridge_0_m0_agent_write_cp_valid),                //         write_cp.valid
		.write_cp_data          (axi_bridge_0_m0_agent_write_cp_data),                 //                 .data
		.write_cp_startofpacket (axi_bridge_0_m0_agent_write_cp_startofpacket),        //                 .startofpacket
		.write_cp_endofpacket   (axi_bridge_0_m0_agent_write_cp_endofpacket),          //                 .endofpacket
		.write_cp_ready         (axi_bridge_0_m0_agent_write_cp_ready),                //                 .ready
		.write_rp_valid         (axi_bridge_0_m0_wr_limiter_rsp_src_valid),            //         write_rp.valid
		.write_rp_data          (axi_bridge_0_m0_wr_limiter_rsp_src_data),             //                 .data
		.write_rp_channel       (axi_bridge_0_m0_wr_limiter_rsp_src_channel),          //                 .channel
		.write_rp_startofpacket (axi_bridge_0_m0_wr_limiter_rsp_src_startofpacket),    //                 .startofpacket
		.write_rp_endofpacket   (axi_bridge_0_m0_wr_limiter_rsp_src_endofpacket),      //                 .endofpacket
		.write_rp_ready         (axi_bridge_0_m0_wr_limiter_rsp_src_ready),            //                 .ready
		.read_cp_valid          (axi_bridge_0_m0_agent_read_cp_valid),                 //          read_cp.valid
		.read_cp_data           (axi_bridge_0_m0_agent_read_cp_data),                  //                 .data
		.read_cp_startofpacket  (axi_bridge_0_m0_agent_read_cp_startofpacket),         //                 .startofpacket
		.read_cp_endofpacket    (axi_bridge_0_m0_agent_read_cp_endofpacket),           //                 .endofpacket
		.read_cp_ready          (axi_bridge_0_m0_agent_read_cp_ready),                 //                 .ready
		.read_rp_valid          (axi_bridge_0_m0_rd_limiter_rsp_src_valid),            //          read_rp.valid
		.read_rp_data           (axi_bridge_0_m0_rd_limiter_rsp_src_data),             //                 .data
		.read_rp_channel        (axi_bridge_0_m0_rd_limiter_rsp_src_channel),          //                 .channel
		.read_rp_startofpacket  (axi_bridge_0_m0_rd_limiter_rsp_src_startofpacket),    //                 .startofpacket
		.read_rp_endofpacket    (axi_bridge_0_m0_rd_limiter_rsp_src_endofpacket),      //                 .endofpacket
		.read_rp_ready          (axi_bridge_0_m0_rd_limiter_rsp_src_ready),            //                 .ready
		.awid                   (axi_bridge_0_m0_translator_m0_awid),                  // altera_axi_slave.awid
		.awaddr                 (axi_bridge_0_m0_translator_m0_awaddr),                //                 .awaddr
		.awlen                  (axi_bridge_0_m0_translator_m0_awlen),                 //                 .awlen
		.awsize                 (axi_bridge_0_m0_translator_m0_awsize),                //                 .awsize
		.awburst                (axi_bridge_0_m0_translator_m0_awburst),               //                 .awburst
		.awlock                 (axi_bridge_0_m0_translator_m0_awlock),                //                 .awlock
		.awcache                (axi_bridge_0_m0_translator_m0_awcache),               //                 .awcache
		.awprot                 (axi_bridge_0_m0_translator_m0_awprot),                //                 .awprot
		.awuser                 (axi_bridge_0_m0_translator_m0_awuser),                //                 .awuser
		.awqos                  (axi_bridge_0_m0_translator_m0_awqos),                 //                 .awqos
		.awregion               (axi_bridge_0_m0_translator_m0_awregion),              //                 .awregion
		.awvalid                (axi_bridge_0_m0_translator_m0_awvalid),               //                 .awvalid
		.awready                (axi_bridge_0_m0_translator_m0_awready),               //                 .awready
		.wdata                  (axi_bridge_0_m0_translator_m0_wdata),                 //                 .wdata
		.wstrb                  (axi_bridge_0_m0_translator_m0_wstrb),                 //                 .wstrb
		.wlast                  (axi_bridge_0_m0_translator_m0_wlast),                 //                 .wlast
		.wvalid                 (axi_bridge_0_m0_translator_m0_wvalid),                //                 .wvalid
		.wuser                  (axi_bridge_0_m0_translator_m0_wuser),                 //                 .wuser
		.wready                 (axi_bridge_0_m0_translator_m0_wready),                //                 .wready
		.bid                    (axi_bridge_0_m0_translator_m0_bid),                   //                 .bid
		.bresp                  (axi_bridge_0_m0_translator_m0_bresp),                 //                 .bresp
		.buser                  (axi_bridge_0_m0_translator_m0_buser),                 //                 .buser
		.bvalid                 (axi_bridge_0_m0_translator_m0_bvalid),                //                 .bvalid
		.bready                 (axi_bridge_0_m0_translator_m0_bready),                //                 .bready
		.arid                   (axi_bridge_0_m0_translator_m0_arid),                  //                 .arid
		.araddr                 (axi_bridge_0_m0_translator_m0_araddr),                //                 .araddr
		.arlen                  (axi_bridge_0_m0_translator_m0_arlen),                 //                 .arlen
		.arsize                 (axi_bridge_0_m0_translator_m0_arsize),                //                 .arsize
		.arburst                (axi_bridge_0_m0_translator_m0_arburst),               //                 .arburst
		.arlock                 (axi_bridge_0_m0_translator_m0_arlock),                //                 .arlock
		.arcache                (axi_bridge_0_m0_translator_m0_arcache),               //                 .arcache
		.arprot                 (axi_bridge_0_m0_translator_m0_arprot),                //                 .arprot
		.aruser                 (axi_bridge_0_m0_translator_m0_aruser),                //                 .aruser
		.arqos                  (axi_bridge_0_m0_translator_m0_arqos),                 //                 .arqos
		.arregion               (axi_bridge_0_m0_translator_m0_arregion),              //                 .arregion
		.arvalid                (axi_bridge_0_m0_translator_m0_arvalid),               //                 .arvalid
		.arready                (axi_bridge_0_m0_translator_m0_arready),               //                 .arready
		.rid                    (axi_bridge_0_m0_translator_m0_rid),                   //                 .rid
		.rdata                  (axi_bridge_0_m0_translator_m0_rdata),                 //                 .rdata
		.rresp                  (axi_bridge_0_m0_translator_m0_rresp),                 //                 .rresp
		.rlast                  (axi_bridge_0_m0_translator_m0_rlast),                 //                 .rlast
		.rvalid                 (axi_bridge_0_m0_translator_m0_rvalid),                //                 .rvalid
		.rready                 (axi_bridge_0_m0_translator_m0_rready),                //                 .rready
		.ruser                  (axi_bridge_0_m0_translator_m0_ruser),                 //                 .ruser
		.wid                    (2'b00)                                                //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (157),
		.PKT_ORI_BURST_SIZE_L      (155),
		.PKT_RESPONSE_STATUS_H     (154),
		.PKT_RESPONSE_STATUS_L     (153),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (137),
		.PKT_PROTECTION_H          (148),
		.PKT_PROTECTION_L          (146),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (158),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intel_onchip_ssram_drw_s1_agent (
		.clk                     (altpll_0_c0_clk),                                               //             clk.clk
		.reset                   (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (intel_onchip_ssram_drw_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (intel_onchip_ssram_drw_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (intel_onchip_ssram_drw_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (intel_onchip_ssram_drw_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (intel_onchip_ssram_drw_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (intel_onchip_ssram_drw_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (intel_onchip_ssram_drw_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (intel_onchip_ssram_drw_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (intel_onchip_ssram_drw_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (intel_onchip_ssram_drw_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (intel_onchip_ssram_drw_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (intel_onchip_ssram_drw_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (intel_onchip_ssram_drw_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (intel_onchip_ssram_drw_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (intel_onchip_ssram_drw_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (intel_onchip_ssram_drw_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (intel_onchip_ssram_drw_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (intel_onchip_ssram_drw_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (intel_onchip_ssram_drw_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (intel_onchip_ssram_drw_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (intel_onchip_ssram_drw_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (intel_onchip_ssram_drw_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (intel_onchip_ssram_drw_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (intel_onchip_ssram_drw_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (intel_onchip_ssram_drw_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (intel_onchip_ssram_drw_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (intel_onchip_ssram_drw_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (159),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_onchip_ssram_drw_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (intel_onchip_ssram_drw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (intel_onchip_ssram_drw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (intel_onchip_ssram_drw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intel_onchip_ssram_drw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intel_onchip_ssram_drw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intel_onchip_ssram_drw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_onchip_ssram_drw_s1_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                                           //       clk.clk
		.reset             (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (intel_onchip_ssram_drw_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (157),
		.PKT_ORI_BURST_SIZE_L      (155),
		.PKT_RESPONSE_STATUS_H     (154),
		.PKT_RESPONSE_STATUS_L     (153),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (137),
		.PKT_PROTECTION_H          (148),
		.PKT_PROTECTION_L          (146),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (158),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intel_onchip_ssram_drw_s2_agent (
		.clk                     (altpll_0_c0_clk),                                               //             clk.clk
		.reset                   (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (intel_onchip_ssram_drw_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (intel_onchip_ssram_drw_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (intel_onchip_ssram_drw_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (intel_onchip_ssram_drw_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (intel_onchip_ssram_drw_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (intel_onchip_ssram_drw_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (intel_onchip_ssram_drw_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (intel_onchip_ssram_drw_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (intel_onchip_ssram_drw_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (intel_onchip_ssram_drw_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (intel_onchip_ssram_drw_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (intel_onchip_ssram_drw_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (intel_onchip_ssram_drw_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (intel_onchip_ssram_drw_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (intel_onchip_ssram_drw_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (intel_onchip_ssram_drw_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (intel_onchip_ssram_drw_s2_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (intel_onchip_ssram_drw_s2_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (intel_onchip_ssram_drw_s2_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (intel_onchip_ssram_drw_s2_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (intel_onchip_ssram_drw_s2_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (intel_onchip_ssram_drw_s2_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (intel_onchip_ssram_drw_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (intel_onchip_ssram_drw_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (intel_onchip_ssram_drw_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (intel_onchip_ssram_drw_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (intel_onchip_ssram_drw_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (159),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_onchip_ssram_drw_s2_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (intel_onchip_ssram_drw_s2_agent_rf_source_data),             //        in.data
		.in_valid          (intel_onchip_ssram_drw_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (intel_onchip_ssram_drw_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intel_onchip_ssram_drw_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intel_onchip_ssram_drw_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intel_onchip_ssram_drw_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_onchip_ssram_drw_s2_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                                           //       clk.clk
		.reset             (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (intel_onchip_ssram_drw_s2_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	cycloneiv_mm_interconnect_0_router router (
		.sink_ready         (axi_bridge_0_m0_agent_write_cp_ready),               //      sink.ready
		.sink_valid         (axi_bridge_0_m0_agent_write_cp_valid),               //          .valid
		.sink_data          (axi_bridge_0_m0_agent_write_cp_data),                //          .data
		.sink_startofpacket (axi_bridge_0_m0_agent_write_cp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (axi_bridge_0_m0_agent_write_cp_endofpacket),         //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                         //       clk.clk
		.reset              (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                   //       src.ready
		.src_valid          (router_src_valid),                                   //          .valid
		.src_data           (router_src_data),                                    //          .data
		.src_channel        (router_src_channel),                                 //          .channel
		.src_startofpacket  (router_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                              //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_router router_001 (
		.sink_ready         (axi_bridge_0_m0_agent_read_cp_ready),                //      sink.ready
		.sink_valid         (axi_bridge_0_m0_agent_read_cp_valid),                //          .valid
		.sink_data          (axi_bridge_0_m0_agent_read_cp_data),                 //          .data
		.sink_startofpacket (axi_bridge_0_m0_agent_read_cp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (axi_bridge_0_m0_agent_read_cp_endofpacket),          //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                         //       clk.clk
		.reset              (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                               //       src.ready
		.src_valid          (router_001_src_valid),                               //          .valid
		.src_data           (router_001_src_data),                                //          .data
		.src_channel        (router_001_src_channel),                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (intel_onchip_ssram_drw_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (intel_onchip_ssram_drw_s1_agent_rp_valid),                  //          .valid
		.sink_data          (intel_onchip_ssram_drw_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (intel_onchip_ssram_drw_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (intel_onchip_ssram_drw_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_0_c0_clk),                                           //       clk.clk
		.reset              (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (intel_onchip_ssram_drw_s2_agent_rp_ready),                  //      sink.ready
		.sink_valid         (intel_onchip_ssram_drw_s2_agent_rp_valid),                  //          .valid
		.sink_data          (intel_onchip_ssram_drw_s2_agent_rp_data),                   //          .data
		.sink_startofpacket (intel_onchip_ssram_drw_s2_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (intel_onchip_ssram_drw_s2_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_0_c0_clk),                                           //       clk.clk
		.reset              (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                      //       src.ready
		.src_valid          (router_003_src_valid),                                      //          .valid
		.src_data           (router_003_src_data),                                       //          .data
		.src_channel        (router_003_src_channel),                                    //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) axi_bridge_0_m0_wr_limiter (
		.clk                    (clock_bridge_0_out_clk_clk),                         //       clk.clk
		.reset                  (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                   //          .valid
		.cmd_sink_data          (router_src_data),                                    //          .data
		.cmd_sink_channel       (router_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (axi_bridge_0_m0_wr_limiter_cmd_src_ready),           //   cmd_src.ready
		.cmd_src_data           (axi_bridge_0_m0_wr_limiter_cmd_src_data),            //          .data
		.cmd_src_channel        (axi_bridge_0_m0_wr_limiter_cmd_src_channel),         //          .channel
		.cmd_src_startofpacket  (axi_bridge_0_m0_wr_limiter_cmd_src_startofpacket),   //          .startofpacket
		.cmd_src_endofpacket    (axi_bridge_0_m0_wr_limiter_cmd_src_endofpacket),     //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (axi_bridge_0_m0_wr_limiter_rsp_src_ready),           //   rsp_src.ready
		.rsp_src_valid          (axi_bridge_0_m0_wr_limiter_rsp_src_valid),           //          .valid
		.rsp_src_data           (axi_bridge_0_m0_wr_limiter_rsp_src_data),            //          .data
		.rsp_src_channel        (axi_bridge_0_m0_wr_limiter_rsp_src_channel),         //          .channel
		.rsp_src_startofpacket  (axi_bridge_0_m0_wr_limiter_rsp_src_startofpacket),   //          .startofpacket
		.rsp_src_endofpacket    (axi_bridge_0_m0_wr_limiter_rsp_src_endofpacket),     //          .endofpacket
		.cmd_src_valid          (axi_bridge_0_m0_wr_limiter_cmd_valid_data)           // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) axi_bridge_0_m0_rd_limiter (
		.clk                    (clock_bridge_0_out_clk_clk),                         //       clk.clk
		.reset                  (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                               //          .valid
		.cmd_sink_data          (router_001_src_data),                                //          .data
		.cmd_sink_channel       (router_001_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (axi_bridge_0_m0_rd_limiter_cmd_src_ready),           //   cmd_src.ready
		.cmd_src_data           (axi_bridge_0_m0_rd_limiter_cmd_src_data),            //          .data
		.cmd_src_channel        (axi_bridge_0_m0_rd_limiter_cmd_src_channel),         //          .channel
		.cmd_src_startofpacket  (axi_bridge_0_m0_rd_limiter_cmd_src_startofpacket),   //          .startofpacket
		.cmd_src_endofpacket    (axi_bridge_0_m0_rd_limiter_cmd_src_endofpacket),     //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (axi_bridge_0_m0_rd_limiter_rsp_src_ready),           //   rsp_src.ready
		.rsp_src_valid          (axi_bridge_0_m0_rd_limiter_rsp_src_valid),           //          .valid
		.rsp_src_data           (axi_bridge_0_m0_rd_limiter_rsp_src_data),            //          .data
		.rsp_src_channel        (axi_bridge_0_m0_rd_limiter_rsp_src_channel),         //          .channel
		.rsp_src_startofpacket  (axi_bridge_0_m0_rd_limiter_rsp_src_startofpacket),   //          .startofpacket
		.rsp_src_endofpacket    (axi_bridge_0_m0_rd_limiter_rsp_src_endofpacket),     //          .endofpacket
		.cmd_src_valid          (axi_bridge_0_m0_rd_limiter_cmd_valid_data)           // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (137),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (129),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) intel_onchip_ssram_drw_s1_burst_adapter (
		.clk                   (altpll_0_c0_clk),                                               //       cr0.clk
		.reset                 (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                             //          .ready
		.source0_valid         (intel_onchip_ssram_drw_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (intel_onchip_ssram_drw_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (intel_onchip_ssram_drw_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (intel_onchip_ssram_drw_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (intel_onchip_ssram_drw_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (intel_onchip_ssram_drw_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (137),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (129),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) intel_onchip_ssram_drw_s2_burst_adapter (
		.clk                   (altpll_0_c0_clk),                                               //       cr0.clk
		.reset                 (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                         //          .ready
		.source0_valid         (intel_onchip_ssram_drw_s2_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (intel_onchip_ssram_drw_s2_burst_adapter_source0_data),          //          .data
		.source0_channel       (intel_onchip_ssram_drw_s2_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (intel_onchip_ssram_drw_s2_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (intel_onchip_ssram_drw_s2_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (intel_onchip_ssram_drw_s2_burst_adapter_source0_ready)          //          .ready
	);

	cycloneiv_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clock_bridge_0_out_clk_clk),                         //        clk.clk
		.reset              (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (axi_bridge_0_m0_wr_limiter_cmd_src_ready),           //       sink.ready
		.sink_channel       (axi_bridge_0_m0_wr_limiter_cmd_src_channel),         //           .channel
		.sink_data          (axi_bridge_0_m0_wr_limiter_cmd_src_data),            //           .data
		.sink_startofpacket (axi_bridge_0_m0_wr_limiter_cmd_src_startofpacket),   //           .startofpacket
		.sink_endofpacket   (axi_bridge_0_m0_wr_limiter_cmd_src_endofpacket),     //           .endofpacket
		.sink_valid         (axi_bridge_0_m0_wr_limiter_cmd_valid_data),          // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_src0_data),                                //           .data
		.src0_channel       (cmd_demux_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_src1_data),                                //           .data
		.src1_channel       (cmd_demux_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                          //           .endofpacket
	);

	cycloneiv_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clock_bridge_0_out_clk_clk),                         //        clk.clk
		.reset              (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (axi_bridge_0_m0_rd_limiter_cmd_src_ready),           //       sink.ready
		.sink_channel       (axi_bridge_0_m0_rd_limiter_cmd_src_channel),         //           .channel
		.sink_data          (axi_bridge_0_m0_rd_limiter_cmd_src_data),            //           .data
		.sink_startofpacket (axi_bridge_0_m0_rd_limiter_cmd_src_startofpacket),   //           .startofpacket
		.sink_endofpacket   (axi_bridge_0_m0_rd_limiter_cmd_src_endofpacket),     //           .endofpacket
		.sink_valid         (axi_bridge_0_m0_rd_limiter_cmd_valid_data),          // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                           //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                           //           .valid
		.src0_data          (cmd_demux_001_src0_data),                            //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                         //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                     //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                           //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                           //           .valid
		.src1_data          (cmd_demux_001_src1_data),                            //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                         //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                      //           .endofpacket
	);

	cycloneiv_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_0_c0_clk),                                           //       clk.clk
		.reset               (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (async_fifo_out_ready),                                      //     sink0.ready
		.sink0_valid         (async_fifo_out_valid),                                      //          .valid
		.sink0_channel       (async_fifo_out_channel),                                    //          .channel
		.sink0_data          (async_fifo_out_data),                                       //          .data
		.sink0_startofpacket (async_fifo_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (async_fifo_out_endofpacket),                                //          .endofpacket
		.sink1_ready         (async_fifo_002_out_ready),                                  //     sink1.ready
		.sink1_valid         (async_fifo_002_out_valid),                                  //          .valid
		.sink1_channel       (async_fifo_002_out_channel),                                //          .channel
		.sink1_data          (async_fifo_002_out_data),                                   //          .data
		.sink1_startofpacket (async_fifo_002_out_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (async_fifo_002_out_endofpacket)                             //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (altpll_0_c0_clk),                                           //       clk.clk
		.reset               (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (async_fifo_001_out_ready),                                  //     sink0.ready
		.sink0_valid         (async_fifo_001_out_valid),                                  //          .valid
		.sink0_channel       (async_fifo_001_out_channel),                                //          .channel
		.sink0_data          (async_fifo_001_out_data),                                   //          .data
		.sink0_startofpacket (async_fifo_001_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (async_fifo_001_out_endofpacket),                            //          .endofpacket
		.sink1_ready         (async_fifo_003_out_ready),                                  //     sink1.ready
		.sink1_valid         (async_fifo_003_out_valid),                                  //          .valid
		.sink1_channel       (async_fifo_003_out_channel),                                //          .channel
		.sink1_data          (async_fifo_003_out_data),                                   //          .data
		.sink1_startofpacket (async_fifo_003_out_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (async_fifo_003_out_endofpacket)                             //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_0_c0_clk),                                           //       clk.clk
		.reset              (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                      //      sink.ready
		.sink_channel       (router_002_src_channel),                                    //          .channel
		.sink_data          (router_002_src_data),                                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_002_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                 //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (altpll_0_c0_clk),                                           //       clk.clk
		.reset              (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                      //      sink.ready
		.sink_channel       (router_003_src_channel),                                    //          .channel
		.sink_data          (router_003_src_data),                                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_003_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                             //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clock_bridge_0_out_clk_clk),                         //       clk.clk
		.reset               (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_src_valid),                                  //          .valid
		.src_data            (rsp_mux_src_data),                                   //          .data
		.src_channel         (rsp_mux_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (async_fifo_004_out_ready),                           //     sink0.ready
		.sink0_valid         (async_fifo_004_out_valid),                           //          .valid
		.sink0_channel       (async_fifo_004_out_channel),                         //          .channel
		.sink0_data          (async_fifo_004_out_data),                            //          .data
		.sink0_startofpacket (async_fifo_004_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (async_fifo_004_out_endofpacket),                     //          .endofpacket
		.sink1_ready         (async_fifo_006_out_ready),                           //     sink1.ready
		.sink1_valid         (async_fifo_006_out_valid),                           //          .valid
		.sink1_channel       (async_fifo_006_out_channel),                         //          .channel
		.sink1_data          (async_fifo_006_out_data),                            //          .data
		.sink1_startofpacket (async_fifo_006_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (async_fifo_006_out_endofpacket)                      //          .endofpacket
	);

	cycloneiv_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clock_bridge_0_out_clk_clk),                         //       clk.clk
		.reset               (axi_bridge_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                              //          .valid
		.src_data            (rsp_mux_001_src_data),                               //          .data
		.src_channel         (rsp_mux_001_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (async_fifo_005_out_ready),                           //     sink0.ready
		.sink0_valid         (async_fifo_005_out_valid),                           //          .valid
		.sink0_channel       (async_fifo_005_out_channel),                         //          .channel
		.sink0_data          (async_fifo_005_out_data),                            //          .data
		.sink0_startofpacket (async_fifo_005_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (async_fifo_005_out_endofpacket),                     //          .endofpacket
		.sink1_ready         (async_fifo_007_out_ready),                           //     sink1.ready
		.sink1_valid         (async_fifo_007_out_valid),                           //          .valid
		.sink1_channel       (async_fifo_007_out_channel),                         //          .channel
		.sink1_data          (async_fifo_007_out_data),                            //          .data
		.sink1_startofpacket (async_fifo_007_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (async_fifo_007_out_endofpacket)                      //          .endofpacket
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo (
		.in_clk            (clock_bridge_0_out_clk_clk),                                 //        in_clk.clk
		.in_reset_n        (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset_n
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset_n       (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (cmd_demux_src0_data),                                        //            in.data
		.in_valid          (cmd_demux_src0_valid),                                       //              .valid
		.in_ready          (cmd_demux_src0_ready),                                       //              .ready
		.in_startofpacket  (cmd_demux_src0_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                     //              .channel
		.out_data          (async_fifo_out_data),                                        //           out.data
		.out_valid         (async_fifo_out_valid),                                       //              .valid
		.out_ready         (async_fifo_out_ready),                                       //              .ready
		.out_startofpacket (async_fifo_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (async_fifo_out_endofpacket),                                 //              .endofpacket
		.out_channel       (async_fifo_out_channel),                                     //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_001 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                 //        in_clk.clk
		.in_reset_n        (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset_n
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset_n       (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (cmd_demux_src1_data),                                        //            in.data
		.in_valid          (cmd_demux_src1_valid),                                       //              .valid
		.in_ready          (cmd_demux_src1_ready),                                       //              .ready
		.in_startofpacket  (cmd_demux_src1_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                     //              .channel
		.out_data          (async_fifo_001_out_data),                                    //           out.data
		.out_valid         (async_fifo_001_out_valid),                                   //              .valid
		.out_ready         (async_fifo_001_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_001_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_001_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_001_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_002 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                 //        in_clk.clk
		.in_reset_n        (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset_n
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset_n       (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (cmd_demux_001_src0_data),                                    //            in.data
		.in_valid          (cmd_demux_001_src0_valid),                                   //              .valid
		.in_ready          (cmd_demux_001_src0_ready),                                   //              .ready
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                 //              .channel
		.out_data          (async_fifo_002_out_data),                                    //           out.data
		.out_valid         (async_fifo_002_out_valid),                                   //              .valid
		.out_ready         (async_fifo_002_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_002_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_002_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_002_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_003 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                 //        in_clk.clk
		.in_reset_n        (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset_n
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset_n       (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (cmd_demux_001_src1_data),                                    //            in.data
		.in_valid          (cmd_demux_001_src1_valid),                                   //              .valid
		.in_ready          (cmd_demux_001_src1_ready),                                   //              .ready
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                 //              .channel
		.out_data          (async_fifo_003_out_data),                                    //           out.data
		.out_valid         (async_fifo_003_out_valid),                                   //              .valid
		.out_ready         (async_fifo_003_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_003_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_003_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_003_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_004 (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset_n        (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clock_bridge_0_out_clk_clk),                                 //       out_clk.clk
		.out_reset_n       (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset_n
		.in_data           (rsp_demux_src0_data),                                        //            in.data
		.in_valid          (rsp_demux_src0_valid),                                       //              .valid
		.in_ready          (rsp_demux_src0_ready),                                       //              .ready
		.in_startofpacket  (rsp_demux_src0_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                     //              .channel
		.out_data          (async_fifo_004_out_data),                                    //           out.data
		.out_valid         (async_fifo_004_out_valid),                                   //              .valid
		.out_ready         (async_fifo_004_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_004_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_004_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_004_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_005 (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset_n        (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clock_bridge_0_out_clk_clk),                                 //       out_clk.clk
		.out_reset_n       (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset_n
		.in_data           (rsp_demux_src1_data),                                        //            in.data
		.in_valid          (rsp_demux_src1_valid),                                       //              .valid
		.in_ready          (rsp_demux_src1_ready),                                       //              .ready
		.in_startofpacket  (rsp_demux_src1_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                     //              .channel
		.out_data          (async_fifo_005_out_data),                                    //           out.data
		.out_valid         (async_fifo_005_out_valid),                                   //              .valid
		.out_ready         (async_fifo_005_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_005_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_005_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_005_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_006 (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset_n        (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clock_bridge_0_out_clk_clk),                                 //       out_clk.clk
		.out_reset_n       (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset_n
		.in_data           (rsp_demux_001_src0_data),                                    //            in.data
		.in_valid          (rsp_demux_001_src0_valid),                                   //              .valid
		.in_ready          (rsp_demux_001_src0_ready),                                   //              .ready
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                 //              .channel
		.out_data          (async_fifo_006_out_data),                                    //           out.data
		.out_valid         (async_fifo_006_out_valid),                                   //              .valid
		.out_ready         (async_fifo_006_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_006_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_006_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_006_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (158),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (2),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_007 (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset_n        (~intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clock_bridge_0_out_clk_clk),                                 //       out_clk.clk
		.out_reset_n       (~axi_bridge_0_clk_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset_n
		.in_data           (rsp_demux_001_src1_data),                                    //            in.data
		.in_valid          (rsp_demux_001_src1_valid),                                   //              .valid
		.in_ready          (rsp_demux_001_src1_ready),                                   //              .ready
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                 //              .channel
		.out_data          (async_fifo_007_out_data),                                    //           out.data
		.out_valid         (async_fifo_007_out_valid),                                   //              .valid
		.out_ready         (async_fifo_007_out_ready),                                   //              .ready
		.out_startofpacket (async_fifo_007_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (async_fifo_007_out_endofpacket),                             //              .endofpacket
		.out_channel       (async_fifo_007_out_channel),                                 //              .channel
		.in_csr_address    (1'b0),                                                       //   (terminated)
		.in_csr_read       (1'b0),                                                       //   (terminated)
		.in_csr_write      (1'b0),                                                       //   (terminated)
		.in_csr_readdata   (),                                                           //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                       //   (terminated)
		.out_csr_address   (1'b0),                                                       //   (terminated)
		.out_csr_read      (1'b0),                                                       //   (terminated)
		.out_csr_write     (1'b0),                                                       //   (terminated)
		.out_csr_readdata  (),                                                           //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                       //   (terminated)
		.in_empty          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_error         (),                                                           //   (terminated)
		.space_avail_data  ()                                                            //   (terminated)
	);

	cycloneiv_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_0_c0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (intel_onchip_ssram_drw_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	cycloneiv_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (intel_onchip_ssram_drw_s2_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                          //         .error
	);

endmodule
