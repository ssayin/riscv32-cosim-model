// cycloneiv.v

// Generated using ACDS version 22.1 917

`timescale 1 ps / 1 ps
module cycloneiv (
		output wire        altpll_0_c1_clk,                //             altpll_0_c1.clk
		output wire        altpll_0_locked_conduit_export, // altpll_0_locked_conduit.export
		input  wire        altpll_0_pll_slave_read,        //      altpll_0_pll_slave.read
		input  wire        altpll_0_pll_slave_write,       //                        .write
		input  wire [1:0]  altpll_0_pll_slave_address,     //                        .address
		output wire [31:0] altpll_0_pll_slave_readdata,    //                        .readdata
		input  wire [31:0] altpll_0_pll_slave_writedata,   //                        .writedata
		input  wire [1:0]  axi_bridge_0_s0_awid,           //         axi_bridge_0_s0.awid
		input  wire [31:0] axi_bridge_0_s0_awaddr,         //                        .awaddr
		input  wire [7:0]  axi_bridge_0_s0_awlen,          //                        .awlen
		input  wire [2:0]  axi_bridge_0_s0_awsize,         //                        .awsize
		input  wire [1:0]  axi_bridge_0_s0_awburst,        //                        .awburst
		input  wire [0:0]  axi_bridge_0_s0_awlock,         //                        .awlock
		input  wire [3:0]  axi_bridge_0_s0_awcache,        //                        .awcache
		input  wire [2:0]  axi_bridge_0_s0_awprot,         //                        .awprot
		input  wire [3:0]  axi_bridge_0_s0_awqos,          //                        .awqos
		input  wire [3:0]  axi_bridge_0_s0_awregion,       //                        .awregion
		input  wire        axi_bridge_0_s0_awvalid,        //                        .awvalid
		output wire        axi_bridge_0_s0_awready,        //                        .awready
		input  wire [63:0] axi_bridge_0_s0_wdata,          //                        .wdata
		input  wire [7:0]  axi_bridge_0_s0_wstrb,          //                        .wstrb
		input  wire        axi_bridge_0_s0_wlast,          //                        .wlast
		input  wire        axi_bridge_0_s0_wvalid,         //                        .wvalid
		output wire        axi_bridge_0_s0_wready,         //                        .wready
		output wire [1:0]  axi_bridge_0_s0_bid,            //                        .bid
		output wire [1:0]  axi_bridge_0_s0_bresp,          //                        .bresp
		output wire        axi_bridge_0_s0_bvalid,         //                        .bvalid
		input  wire        axi_bridge_0_s0_bready,         //                        .bready
		input  wire [1:0]  axi_bridge_0_s0_arid,           //                        .arid
		input  wire [31:0] axi_bridge_0_s0_araddr,         //                        .araddr
		input  wire [7:0]  axi_bridge_0_s0_arlen,          //                        .arlen
		input  wire [2:0]  axi_bridge_0_s0_arsize,         //                        .arsize
		input  wire [1:0]  axi_bridge_0_s0_arburst,        //                        .arburst
		input  wire [0:0]  axi_bridge_0_s0_arlock,         //                        .arlock
		input  wire [3:0]  axi_bridge_0_s0_arcache,        //                        .arcache
		input  wire [2:0]  axi_bridge_0_s0_arprot,         //                        .arprot
		input  wire [3:0]  axi_bridge_0_s0_arqos,          //                        .arqos
		input  wire [3:0]  axi_bridge_0_s0_arregion,       //                        .arregion
		input  wire        axi_bridge_0_s0_arvalid,        //                        .arvalid
		output wire        axi_bridge_0_s0_arready,        //                        .arready
		output wire [1:0]  axi_bridge_0_s0_rid,            //                        .rid
		output wire [63:0] axi_bridge_0_s0_rdata,          //                        .rdata
		output wire [1:0]  axi_bridge_0_s0_rresp,          //                        .rresp
		output wire        axi_bridge_0_s0_rlast,          //                        .rlast
		output wire        axi_bridge_0_s0_rvalid,         //                        .rvalid
		input  wire        axi_bridge_0_s0_rready,         //                        .rready
		input  wire        clk_clk,                        //                     clk.clk
		input  wire        clock_bridge_0_in_clk_clk,      //   clock_bridge_0_in_clk.clk
		input  wire        rst_n_reset_n                   //                   rst_n.reset_n
	);

	wire         altpll_0_c0_clk;                                        // altpll_0:c0 -> [intel_onchip_ssram_drw:clk, intel_onchip_ssram_drw:clk2, mm_interconnect_0:altpll_0_c0_clk, rst_controller_002:clk]
	wire   [1:0] axi_bridge_0_m0_awburst;                                // axi_bridge_0:m0_awburst -> mm_interconnect_0:axi_bridge_0_m0_awburst
	wire   [3:0] axi_bridge_0_m0_arregion;                               // axi_bridge_0:m0_arregion -> mm_interconnect_0:axi_bridge_0_m0_arregion
	wire   [7:0] axi_bridge_0_m0_arlen;                                  // axi_bridge_0:m0_arlen -> mm_interconnect_0:axi_bridge_0_m0_arlen
	wire   [3:0] axi_bridge_0_m0_arqos;                                  // axi_bridge_0:m0_arqos -> mm_interconnect_0:axi_bridge_0_m0_arqos
	wire   [7:0] axi_bridge_0_m0_wstrb;                                  // axi_bridge_0:m0_wstrb -> mm_interconnect_0:axi_bridge_0_m0_wstrb
	wire         axi_bridge_0_m0_wready;                                 // mm_interconnect_0:axi_bridge_0_m0_wready -> axi_bridge_0:m0_wready
	wire   [1:0] axi_bridge_0_m0_rid;                                    // mm_interconnect_0:axi_bridge_0_m0_rid -> axi_bridge_0:m0_rid
	wire         axi_bridge_0_m0_rready;                                 // axi_bridge_0:m0_rready -> mm_interconnect_0:axi_bridge_0_m0_rready
	wire   [7:0] axi_bridge_0_m0_awlen;                                  // axi_bridge_0:m0_awlen -> mm_interconnect_0:axi_bridge_0_m0_awlen
	wire   [3:0] axi_bridge_0_m0_awqos;                                  // axi_bridge_0:m0_awqos -> mm_interconnect_0:axi_bridge_0_m0_awqos
	wire   [3:0] axi_bridge_0_m0_arcache;                                // axi_bridge_0:m0_arcache -> mm_interconnect_0:axi_bridge_0_m0_arcache
	wire         axi_bridge_0_m0_wvalid;                                 // axi_bridge_0:m0_wvalid -> mm_interconnect_0:axi_bridge_0_m0_wvalid
	wire  [31:0] axi_bridge_0_m0_araddr;                                 // axi_bridge_0:m0_araddr -> mm_interconnect_0:axi_bridge_0_m0_araddr
	wire   [2:0] axi_bridge_0_m0_arprot;                                 // axi_bridge_0:m0_arprot -> mm_interconnect_0:axi_bridge_0_m0_arprot
	wire   [2:0] axi_bridge_0_m0_awprot;                                 // axi_bridge_0:m0_awprot -> mm_interconnect_0:axi_bridge_0_m0_awprot
	wire  [63:0] axi_bridge_0_m0_wdata;                                  // axi_bridge_0:m0_wdata -> mm_interconnect_0:axi_bridge_0_m0_wdata
	wire         axi_bridge_0_m0_arvalid;                                // axi_bridge_0:m0_arvalid -> mm_interconnect_0:axi_bridge_0_m0_arvalid
	wire   [3:0] axi_bridge_0_m0_awcache;                                // axi_bridge_0:m0_awcache -> mm_interconnect_0:axi_bridge_0_m0_awcache
	wire   [1:0] axi_bridge_0_m0_arid;                                   // axi_bridge_0:m0_arid -> mm_interconnect_0:axi_bridge_0_m0_arid
	wire   [0:0] axi_bridge_0_m0_arlock;                                 // axi_bridge_0:m0_arlock -> mm_interconnect_0:axi_bridge_0_m0_arlock
	wire   [0:0] axi_bridge_0_m0_awlock;                                 // axi_bridge_0:m0_awlock -> mm_interconnect_0:axi_bridge_0_m0_awlock
	wire  [31:0] axi_bridge_0_m0_awaddr;                                 // axi_bridge_0:m0_awaddr -> mm_interconnect_0:axi_bridge_0_m0_awaddr
	wire   [1:0] axi_bridge_0_m0_bresp;                                  // mm_interconnect_0:axi_bridge_0_m0_bresp -> axi_bridge_0:m0_bresp
	wire         axi_bridge_0_m0_arready;                                // mm_interconnect_0:axi_bridge_0_m0_arready -> axi_bridge_0:m0_arready
	wire  [63:0] axi_bridge_0_m0_rdata;                                  // mm_interconnect_0:axi_bridge_0_m0_rdata -> axi_bridge_0:m0_rdata
	wire         axi_bridge_0_m0_awready;                                // mm_interconnect_0:axi_bridge_0_m0_awready -> axi_bridge_0:m0_awready
	wire   [1:0] axi_bridge_0_m0_arburst;                                // axi_bridge_0:m0_arburst -> mm_interconnect_0:axi_bridge_0_m0_arburst
	wire   [2:0] axi_bridge_0_m0_arsize;                                 // axi_bridge_0:m0_arsize -> mm_interconnect_0:axi_bridge_0_m0_arsize
	wire         axi_bridge_0_m0_bready;                                 // axi_bridge_0:m0_bready -> mm_interconnect_0:axi_bridge_0_m0_bready
	wire         axi_bridge_0_m0_rlast;                                  // mm_interconnect_0:axi_bridge_0_m0_rlast -> axi_bridge_0:m0_rlast
	wire         axi_bridge_0_m0_wlast;                                  // axi_bridge_0:m0_wlast -> mm_interconnect_0:axi_bridge_0_m0_wlast
	wire   [3:0] axi_bridge_0_m0_awregion;                               // axi_bridge_0:m0_awregion -> mm_interconnect_0:axi_bridge_0_m0_awregion
	wire   [1:0] axi_bridge_0_m0_rresp;                                  // mm_interconnect_0:axi_bridge_0_m0_rresp -> axi_bridge_0:m0_rresp
	wire   [1:0] axi_bridge_0_m0_awid;                                   // axi_bridge_0:m0_awid -> mm_interconnect_0:axi_bridge_0_m0_awid
	wire   [1:0] axi_bridge_0_m0_bid;                                    // mm_interconnect_0:axi_bridge_0_m0_bid -> axi_bridge_0:m0_bid
	wire         axi_bridge_0_m0_bvalid;                                 // mm_interconnect_0:axi_bridge_0_m0_bvalid -> axi_bridge_0:m0_bvalid
	wire   [2:0] axi_bridge_0_m0_awsize;                                 // axi_bridge_0:m0_awsize -> mm_interconnect_0:axi_bridge_0_m0_awsize
	wire         axi_bridge_0_m0_awvalid;                                // axi_bridge_0:m0_awvalid -> mm_interconnect_0:axi_bridge_0_m0_awvalid
	wire         axi_bridge_0_m0_rvalid;                                 // mm_interconnect_0:axi_bridge_0_m0_rvalid -> axi_bridge_0:m0_rvalid
	wire         mm_interconnect_0_intel_onchip_ssram_drw_s1_chipselect; // mm_interconnect_0:intel_onchip_ssram_drw_s1_chipselect -> intel_onchip_ssram_drw:chipselect
	wire  [63:0] mm_interconnect_0_intel_onchip_ssram_drw_s1_readdata;   // intel_onchip_ssram_drw:readdata -> mm_interconnect_0:intel_onchip_ssram_drw_s1_readdata
	wire   [8:0] mm_interconnect_0_intel_onchip_ssram_drw_s1_address;    // mm_interconnect_0:intel_onchip_ssram_drw_s1_address -> intel_onchip_ssram_drw:address
	wire   [7:0] mm_interconnect_0_intel_onchip_ssram_drw_s1_byteenable; // mm_interconnect_0:intel_onchip_ssram_drw_s1_byteenable -> intel_onchip_ssram_drw:byteenable
	wire         mm_interconnect_0_intel_onchip_ssram_drw_s1_write;      // mm_interconnect_0:intel_onchip_ssram_drw_s1_write -> intel_onchip_ssram_drw:write
	wire  [63:0] mm_interconnect_0_intel_onchip_ssram_drw_s1_writedata;  // mm_interconnect_0:intel_onchip_ssram_drw_s1_writedata -> intel_onchip_ssram_drw:writedata
	wire         mm_interconnect_0_intel_onchip_ssram_drw_s1_clken;      // mm_interconnect_0:intel_onchip_ssram_drw_s1_clken -> intel_onchip_ssram_drw:clken
	wire         mm_interconnect_0_intel_onchip_ssram_drw_s2_chipselect; // mm_interconnect_0:intel_onchip_ssram_drw_s2_chipselect -> intel_onchip_ssram_drw:chipselect2
	wire  [63:0] mm_interconnect_0_intel_onchip_ssram_drw_s2_readdata;   // intel_onchip_ssram_drw:readdata2 -> mm_interconnect_0:intel_onchip_ssram_drw_s2_readdata
	wire   [8:0] mm_interconnect_0_intel_onchip_ssram_drw_s2_address;    // mm_interconnect_0:intel_onchip_ssram_drw_s2_address -> intel_onchip_ssram_drw:address2
	wire   [7:0] mm_interconnect_0_intel_onchip_ssram_drw_s2_byteenable; // mm_interconnect_0:intel_onchip_ssram_drw_s2_byteenable -> intel_onchip_ssram_drw:byteenable2
	wire         mm_interconnect_0_intel_onchip_ssram_drw_s2_write;      // mm_interconnect_0:intel_onchip_ssram_drw_s2_write -> intel_onchip_ssram_drw:write2
	wire  [63:0] mm_interconnect_0_intel_onchip_ssram_drw_s2_writedata;  // mm_interconnect_0:intel_onchip_ssram_drw_s2_writedata -> intel_onchip_ssram_drw:writedata2
	wire         mm_interconnect_0_intel_onchip_ssram_drw_s2_clken;      // mm_interconnect_0:intel_onchip_ssram_drw_s2_clken -> intel_onchip_ssram_drw:clken2
	wire         rst_controller_reset_out_reset;                         // rst_controller:reset_out -> altpll_0:reset
	wire         rst_controller_001_reset_out_reset;                     // rst_controller_001:reset_out -> [axi_bridge_0:aresetn, mm_interconnect_0:axi_bridge_0_clk_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_002_reset_out_reset;                     // rst_controller_002:reset_out -> [intel_onchip_ssram_drw:reset, intel_onchip_ssram_drw:reset2, mm_interconnect_0:intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset]
	wire         rst_controller_002_reset_out_reset_req;                 // rst_controller_002:reset_req -> [intel_onchip_ssram_drw:reset_req, intel_onchip_ssram_drw:reset_req2]

	cycloneiv_altpll_0 altpll_0 (
		.clk       (clk_clk),                        //       inclk_interface.clk
		.reset     (rst_controller_reset_out_reset), // inclk_interface_reset.reset
		.read      (altpll_0_pll_slave_read),        //             pll_slave.read
		.write     (altpll_0_pll_slave_write),       //                      .write
		.address   (altpll_0_pll_slave_address),     //                      .address
		.readdata  (altpll_0_pll_slave_readdata),    //                      .readdata
		.writedata (altpll_0_pll_slave_writedata),   //                      .writedata
		.c0        (altpll_0_c0_clk),                //                    c0.clk
		.c1        (altpll_0_c1_clk),                //                    c1.clk
		.locked    (altpll_0_locked_conduit_export)  //        locked_conduit.export
	);

	altera_axi_bridge #(
		.USE_PIPELINE          (1),
		.USE_M0_AWID           (1),
		.USE_M0_AWREGION       (1),
		.USE_M0_AWLEN          (1),
		.USE_M0_AWSIZE         (1),
		.USE_M0_AWBURST        (1),
		.USE_M0_AWLOCK         (1),
		.USE_M0_AWCACHE        (1),
		.USE_M0_AWQOS          (1),
		.USE_S0_AWREGION       (1),
		.USE_S0_AWLOCK         (1),
		.USE_S0_AWCACHE        (1),
		.USE_S0_AWQOS          (1),
		.USE_S0_AWPROT         (1),
		.USE_M0_WSTRB          (1),
		.USE_S0_WLAST          (1),
		.USE_M0_BID            (1),
		.USE_M0_BRESP          (1),
		.USE_S0_BRESP          (1),
		.USE_M0_ARID           (1),
		.USE_M0_ARREGION       (1),
		.USE_M0_ARLEN          (1),
		.USE_M0_ARSIZE         (1),
		.USE_M0_ARBURST        (1),
		.USE_M0_ARLOCK         (1),
		.USE_M0_ARCACHE        (1),
		.USE_M0_ARQOS          (1),
		.USE_S0_ARREGION       (1),
		.USE_S0_ARLOCK         (1),
		.USE_S0_ARCACHE        (1),
		.USE_S0_ARQOS          (1),
		.USE_S0_ARPROT         (1),
		.USE_M0_RID            (1),
		.USE_M0_RRESP          (1),
		.USE_M0_RLAST          (1),
		.USE_S0_RRESP          (1),
		.M0_ID_WIDTH           (2),
		.S0_ID_WIDTH           (2),
		.DATA_WIDTH            (64),
		.WRITE_ADDR_USER_WIDTH (64),
		.READ_ADDR_USER_WIDTH  (64),
		.WRITE_DATA_USER_WIDTH (64),
		.WRITE_RESP_USER_WIDTH (64),
		.READ_DATA_USER_WIDTH  (64),
		.ADDR_WIDTH            (32),
		.USE_S0_AWUSER         (0),
		.USE_S0_ARUSER         (0),
		.USE_S0_WUSER          (0),
		.USE_S0_RUSER          (0),
		.USE_S0_BUSER          (0),
		.USE_M0_AWUSER         (0),
		.USE_M0_ARUSER         (0),
		.USE_M0_WUSER          (0),
		.USE_M0_RUSER          (0),
		.USE_M0_BUSER          (0),
		.AXI_VERSION           ("AXI4"),
		.BURST_LENGTH_WIDTH    (8),
		.LOCK_WIDTH            (1)
	) axi_bridge_0 (
		.aclk        (clock_bridge_0_in_clk_clk),                                            //       clk.clk
		.aresetn     (~rst_controller_001_reset_out_reset),                                  // clk_reset.reset_n
		.s0_awid     (axi_bridge_0_s0_awid),                                                 //        s0.awid
		.s0_awaddr   (axi_bridge_0_s0_awaddr),                                               //          .awaddr
		.s0_awlen    (axi_bridge_0_s0_awlen),                                                //          .awlen
		.s0_awsize   (axi_bridge_0_s0_awsize),                                               //          .awsize
		.s0_awburst  (axi_bridge_0_s0_awburst),                                              //          .awburst
		.s0_awlock   (axi_bridge_0_s0_awlock),                                               //          .awlock
		.s0_awcache  (axi_bridge_0_s0_awcache),                                              //          .awcache
		.s0_awprot   (axi_bridge_0_s0_awprot),                                               //          .awprot
		.s0_awqos    (axi_bridge_0_s0_awqos),                                                //          .awqos
		.s0_awregion (axi_bridge_0_s0_awregion),                                             //          .awregion
		.s0_awvalid  (axi_bridge_0_s0_awvalid),                                              //          .awvalid
		.s0_awready  (axi_bridge_0_s0_awready),                                              //          .awready
		.s0_wdata    (axi_bridge_0_s0_wdata),                                                //          .wdata
		.s0_wstrb    (axi_bridge_0_s0_wstrb),                                                //          .wstrb
		.s0_wlast    (axi_bridge_0_s0_wlast),                                                //          .wlast
		.s0_wvalid   (axi_bridge_0_s0_wvalid),                                               //          .wvalid
		.s0_wready   (axi_bridge_0_s0_wready),                                               //          .wready
		.s0_bid      (axi_bridge_0_s0_bid),                                                  //          .bid
		.s0_bresp    (axi_bridge_0_s0_bresp),                                                //          .bresp
		.s0_bvalid   (axi_bridge_0_s0_bvalid),                                               //          .bvalid
		.s0_bready   (axi_bridge_0_s0_bready),                                               //          .bready
		.s0_arid     (axi_bridge_0_s0_arid),                                                 //          .arid
		.s0_araddr   (axi_bridge_0_s0_araddr),                                               //          .araddr
		.s0_arlen    (axi_bridge_0_s0_arlen),                                                //          .arlen
		.s0_arsize   (axi_bridge_0_s0_arsize),                                               //          .arsize
		.s0_arburst  (axi_bridge_0_s0_arburst),                                              //          .arburst
		.s0_arlock   (axi_bridge_0_s0_arlock),                                               //          .arlock
		.s0_arcache  (axi_bridge_0_s0_arcache),                                              //          .arcache
		.s0_arprot   (axi_bridge_0_s0_arprot),                                               //          .arprot
		.s0_arqos    (axi_bridge_0_s0_arqos),                                                //          .arqos
		.s0_arregion (axi_bridge_0_s0_arregion),                                             //          .arregion
		.s0_arvalid  (axi_bridge_0_s0_arvalid),                                              //          .arvalid
		.s0_arready  (axi_bridge_0_s0_arready),                                              //          .arready
		.s0_rid      (axi_bridge_0_s0_rid),                                                  //          .rid
		.s0_rdata    (axi_bridge_0_s0_rdata),                                                //          .rdata
		.s0_rresp    (axi_bridge_0_s0_rresp),                                                //          .rresp
		.s0_rlast    (axi_bridge_0_s0_rlast),                                                //          .rlast
		.s0_rvalid   (axi_bridge_0_s0_rvalid),                                               //          .rvalid
		.s0_rready   (axi_bridge_0_s0_rready),                                               //          .rready
		.m0_awid     (axi_bridge_0_m0_awid),                                                 //        m0.awid
		.m0_awaddr   (axi_bridge_0_m0_awaddr),                                               //          .awaddr
		.m0_awlen    (axi_bridge_0_m0_awlen),                                                //          .awlen
		.m0_awsize   (axi_bridge_0_m0_awsize),                                               //          .awsize
		.m0_awburst  (axi_bridge_0_m0_awburst),                                              //          .awburst
		.m0_awlock   (axi_bridge_0_m0_awlock),                                               //          .awlock
		.m0_awcache  (axi_bridge_0_m0_awcache),                                              //          .awcache
		.m0_awprot   (axi_bridge_0_m0_awprot),                                               //          .awprot
		.m0_awqos    (axi_bridge_0_m0_awqos),                                                //          .awqos
		.m0_awregion (axi_bridge_0_m0_awregion),                                             //          .awregion
		.m0_awvalid  (axi_bridge_0_m0_awvalid),                                              //          .awvalid
		.m0_awready  (axi_bridge_0_m0_awready),                                              //          .awready
		.m0_wdata    (axi_bridge_0_m0_wdata),                                                //          .wdata
		.m0_wstrb    (axi_bridge_0_m0_wstrb),                                                //          .wstrb
		.m0_wlast    (axi_bridge_0_m0_wlast),                                                //          .wlast
		.m0_wvalid   (axi_bridge_0_m0_wvalid),                                               //          .wvalid
		.m0_wready   (axi_bridge_0_m0_wready),                                               //          .wready
		.m0_bid      (axi_bridge_0_m0_bid),                                                  //          .bid
		.m0_bresp    (axi_bridge_0_m0_bresp),                                                //          .bresp
		.m0_bvalid   (axi_bridge_0_m0_bvalid),                                               //          .bvalid
		.m0_bready   (axi_bridge_0_m0_bready),                                               //          .bready
		.m0_arid     (axi_bridge_0_m0_arid),                                                 //          .arid
		.m0_araddr   (axi_bridge_0_m0_araddr),                                               //          .araddr
		.m0_arlen    (axi_bridge_0_m0_arlen),                                                //          .arlen
		.m0_arsize   (axi_bridge_0_m0_arsize),                                               //          .arsize
		.m0_arburst  (axi_bridge_0_m0_arburst),                                              //          .arburst
		.m0_arlock   (axi_bridge_0_m0_arlock),                                               //          .arlock
		.m0_arcache  (axi_bridge_0_m0_arcache),                                              //          .arcache
		.m0_arprot   (axi_bridge_0_m0_arprot),                                               //          .arprot
		.m0_arqos    (axi_bridge_0_m0_arqos),                                                //          .arqos
		.m0_arregion (axi_bridge_0_m0_arregion),                                             //          .arregion
		.m0_arvalid  (axi_bridge_0_m0_arvalid),                                              //          .arvalid
		.m0_arready  (axi_bridge_0_m0_arready),                                              //          .arready
		.m0_rid      (axi_bridge_0_m0_rid),                                                  //          .rid
		.m0_rdata    (axi_bridge_0_m0_rdata),                                                //          .rdata
		.m0_rresp    (axi_bridge_0_m0_rresp),                                                //          .rresp
		.m0_rlast    (axi_bridge_0_m0_rlast),                                                //          .rlast
		.m0_rvalid   (axi_bridge_0_m0_rvalid),                                               //          .rvalid
		.m0_rready   (axi_bridge_0_m0_rready),                                               //          .rready
		.s0_awuser   (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.s0_wuser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.s0_buser    (),                                                                     // (terminated)
		.s0_aruser   (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.s0_ruser    (),                                                                     // (terminated)
		.m0_awuser   (),                                                                     // (terminated)
		.m0_wuser    (),                                                                     // (terminated)
		.m0_buser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.m0_aruser   (),                                                                     // (terminated)
		.m0_ruser    (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.m0_wid      (),                                                                     // (terminated)
		.s0_wid      (2'b00)                                                                 // (terminated)
	);

	cycloneiv_intel_onchip_ssram_drw intel_onchip_ssram_drw (
		.clk         (altpll_0_c0_clk),                                        //   clk1.clk
		.address     (mm_interconnect_0_intel_onchip_ssram_drw_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_intel_onchip_ssram_drw_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_intel_onchip_ssram_drw_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_intel_onchip_ssram_drw_s1_write),      //       .write
		.readdata    (mm_interconnect_0_intel_onchip_ssram_drw_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_intel_onchip_ssram_drw_s1_writedata),  //       .writedata
		.byteenable  (mm_interconnect_0_intel_onchip_ssram_drw_s1_byteenable), //       .byteenable
		.reset       (rst_controller_002_reset_out_reset),                     // reset1.reset
		.reset_req   (rst_controller_002_reset_out_reset_req),                 //       .reset_req
		.address2    (mm_interconnect_0_intel_onchip_ssram_drw_s2_address),    //     s2.address
		.chipselect2 (mm_interconnect_0_intel_onchip_ssram_drw_s2_chipselect), //       .chipselect
		.clken2      (mm_interconnect_0_intel_onchip_ssram_drw_s2_clken),      //       .clken
		.write2      (mm_interconnect_0_intel_onchip_ssram_drw_s2_write),      //       .write
		.readdata2   (mm_interconnect_0_intel_onchip_ssram_drw_s2_readdata),   //       .readdata
		.writedata2  (mm_interconnect_0_intel_onchip_ssram_drw_s2_writedata),  //       .writedata
		.byteenable2 (mm_interconnect_0_intel_onchip_ssram_drw_s2_byteenable), //       .byteenable
		.clk2        (altpll_0_c0_clk),                                        //   clk2.clk
		.reset2      (rst_controller_002_reset_out_reset),                     // reset2.reset
		.reset_req2  (rst_controller_002_reset_out_reset_req),                 //       .reset_req
		.freeze      (1'b0)                                                    // (terminated)
	);

	cycloneiv_mm_interconnect_0 mm_interconnect_0 (
		.axi_bridge_0_m0_awid                                      (axi_bridge_0_m0_awid),                                   //                                     axi_bridge_0_m0.awid
		.axi_bridge_0_m0_awaddr                                    (axi_bridge_0_m0_awaddr),                                 //                                                    .awaddr
		.axi_bridge_0_m0_awlen                                     (axi_bridge_0_m0_awlen),                                  //                                                    .awlen
		.axi_bridge_0_m0_awsize                                    (axi_bridge_0_m0_awsize),                                 //                                                    .awsize
		.axi_bridge_0_m0_awburst                                   (axi_bridge_0_m0_awburst),                                //                                                    .awburst
		.axi_bridge_0_m0_awlock                                    (axi_bridge_0_m0_awlock),                                 //                                                    .awlock
		.axi_bridge_0_m0_awcache                                   (axi_bridge_0_m0_awcache),                                //                                                    .awcache
		.axi_bridge_0_m0_awprot                                    (axi_bridge_0_m0_awprot),                                 //                                                    .awprot
		.axi_bridge_0_m0_awqos                                     (axi_bridge_0_m0_awqos),                                  //                                                    .awqos
		.axi_bridge_0_m0_awregion                                  (axi_bridge_0_m0_awregion),                               //                                                    .awregion
		.axi_bridge_0_m0_awvalid                                   (axi_bridge_0_m0_awvalid),                                //                                                    .awvalid
		.axi_bridge_0_m0_awready                                   (axi_bridge_0_m0_awready),                                //                                                    .awready
		.axi_bridge_0_m0_wdata                                     (axi_bridge_0_m0_wdata),                                  //                                                    .wdata
		.axi_bridge_0_m0_wstrb                                     (axi_bridge_0_m0_wstrb),                                  //                                                    .wstrb
		.axi_bridge_0_m0_wlast                                     (axi_bridge_0_m0_wlast),                                  //                                                    .wlast
		.axi_bridge_0_m0_wvalid                                    (axi_bridge_0_m0_wvalid),                                 //                                                    .wvalid
		.axi_bridge_0_m0_wready                                    (axi_bridge_0_m0_wready),                                 //                                                    .wready
		.axi_bridge_0_m0_bid                                       (axi_bridge_0_m0_bid),                                    //                                                    .bid
		.axi_bridge_0_m0_bresp                                     (axi_bridge_0_m0_bresp),                                  //                                                    .bresp
		.axi_bridge_0_m0_bvalid                                    (axi_bridge_0_m0_bvalid),                                 //                                                    .bvalid
		.axi_bridge_0_m0_bready                                    (axi_bridge_0_m0_bready),                                 //                                                    .bready
		.axi_bridge_0_m0_arid                                      (axi_bridge_0_m0_arid),                                   //                                                    .arid
		.axi_bridge_0_m0_araddr                                    (axi_bridge_0_m0_araddr),                                 //                                                    .araddr
		.axi_bridge_0_m0_arlen                                     (axi_bridge_0_m0_arlen),                                  //                                                    .arlen
		.axi_bridge_0_m0_arsize                                    (axi_bridge_0_m0_arsize),                                 //                                                    .arsize
		.axi_bridge_0_m0_arburst                                   (axi_bridge_0_m0_arburst),                                //                                                    .arburst
		.axi_bridge_0_m0_arlock                                    (axi_bridge_0_m0_arlock),                                 //                                                    .arlock
		.axi_bridge_0_m0_arcache                                   (axi_bridge_0_m0_arcache),                                //                                                    .arcache
		.axi_bridge_0_m0_arprot                                    (axi_bridge_0_m0_arprot),                                 //                                                    .arprot
		.axi_bridge_0_m0_arqos                                     (axi_bridge_0_m0_arqos),                                  //                                                    .arqos
		.axi_bridge_0_m0_arregion                                  (axi_bridge_0_m0_arregion),                               //                                                    .arregion
		.axi_bridge_0_m0_arvalid                                   (axi_bridge_0_m0_arvalid),                                //                                                    .arvalid
		.axi_bridge_0_m0_arready                                   (axi_bridge_0_m0_arready),                                //                                                    .arready
		.axi_bridge_0_m0_rid                                       (axi_bridge_0_m0_rid),                                    //                                                    .rid
		.axi_bridge_0_m0_rdata                                     (axi_bridge_0_m0_rdata),                                  //                                                    .rdata
		.axi_bridge_0_m0_rresp                                     (axi_bridge_0_m0_rresp),                                  //                                                    .rresp
		.axi_bridge_0_m0_rlast                                     (axi_bridge_0_m0_rlast),                                  //                                                    .rlast
		.axi_bridge_0_m0_rvalid                                    (axi_bridge_0_m0_rvalid),                                 //                                                    .rvalid
		.axi_bridge_0_m0_rready                                    (axi_bridge_0_m0_rready),                                 //                                                    .rready
		.altpll_0_c0_clk                                           (altpll_0_c0_clk),                                        //                                         altpll_0_c0.clk
		.clock_bridge_0_out_clk_clk                                (clock_bridge_0_in_clk_clk),                              //                              clock_bridge_0_out_clk.clk
		.axi_bridge_0_clk_reset_reset_bridge_in_reset_reset        (rst_controller_001_reset_out_reset),                     //        axi_bridge_0_clk_reset_reset_bridge_in_reset.reset
		.intel_onchip_ssram_drw_reset1_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                     // intel_onchip_ssram_drw_reset1_reset_bridge_in_reset.reset
		.intel_onchip_ssram_drw_s1_address                         (mm_interconnect_0_intel_onchip_ssram_drw_s1_address),    //                           intel_onchip_ssram_drw_s1.address
		.intel_onchip_ssram_drw_s1_write                           (mm_interconnect_0_intel_onchip_ssram_drw_s1_write),      //                                                    .write
		.intel_onchip_ssram_drw_s1_readdata                        (mm_interconnect_0_intel_onchip_ssram_drw_s1_readdata),   //                                                    .readdata
		.intel_onchip_ssram_drw_s1_writedata                       (mm_interconnect_0_intel_onchip_ssram_drw_s1_writedata),  //                                                    .writedata
		.intel_onchip_ssram_drw_s1_byteenable                      (mm_interconnect_0_intel_onchip_ssram_drw_s1_byteenable), //                                                    .byteenable
		.intel_onchip_ssram_drw_s1_chipselect                      (mm_interconnect_0_intel_onchip_ssram_drw_s1_chipselect), //                                                    .chipselect
		.intel_onchip_ssram_drw_s1_clken                           (mm_interconnect_0_intel_onchip_ssram_drw_s1_clken),      //                                                    .clken
		.intel_onchip_ssram_drw_s2_address                         (mm_interconnect_0_intel_onchip_ssram_drw_s2_address),    //                           intel_onchip_ssram_drw_s2.address
		.intel_onchip_ssram_drw_s2_write                           (mm_interconnect_0_intel_onchip_ssram_drw_s2_write),      //                                                    .write
		.intel_onchip_ssram_drw_s2_readdata                        (mm_interconnect_0_intel_onchip_ssram_drw_s2_readdata),   //                                                    .readdata
		.intel_onchip_ssram_drw_s2_writedata                       (mm_interconnect_0_intel_onchip_ssram_drw_s2_writedata),  //                                                    .writedata
		.intel_onchip_ssram_drw_s2_byteenable                      (mm_interconnect_0_intel_onchip_ssram_drw_s2_byteenable), //                                                    .byteenable
		.intel_onchip_ssram_drw_s2_chipselect                      (mm_interconnect_0_intel_onchip_ssram_drw_s2_chipselect), //                                                    .chipselect
		.intel_onchip_ssram_drw_s2_clken                           (mm_interconnect_0_intel_onchip_ssram_drw_s2_clken)       //                                                    .clken
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~rst_n_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~rst_n_reset_n),                     // reset_in0.reset
		.clk            (clock_bridge_0_in_clk_clk),          //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~rst_n_reset_n),                         // reset_in0.reset
		.clk            (altpll_0_c0_clk),                        //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_002_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_in1      (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

endmodule
