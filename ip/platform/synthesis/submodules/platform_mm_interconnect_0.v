// platform_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 917

`timescale 1 ps / 1 ps
module platform_mm_interconnect_0 (
		input  wire [0:0]  riscv_core_0_altera_axi4_master_1_awid,       //      riscv_core_0_altera_axi4_master_1.awid
		input  wire [31:0] riscv_core_0_altera_axi4_master_1_awaddr,     //                                       .awaddr
		input  wire [7:0]  riscv_core_0_altera_axi4_master_1_awlen,      //                                       .awlen
		input  wire [2:0]  riscv_core_0_altera_axi4_master_1_awsize,     //                                       .awsize
		input  wire [1:0]  riscv_core_0_altera_axi4_master_1_awburst,    //                                       .awburst
		input  wire [0:0]  riscv_core_0_altera_axi4_master_1_awlock,     //                                       .awlock
		input  wire [3:0]  riscv_core_0_altera_axi4_master_1_awcache,    //                                       .awcache
		input  wire [2:0]  riscv_core_0_altera_axi4_master_1_awprot,     //                                       .awprot
		input  wire [3:0]  riscv_core_0_altera_axi4_master_1_awqos,      //                                       .awqos
		input  wire [3:0]  riscv_core_0_altera_axi4_master_1_awregion,   //                                       .awregion
		input  wire        riscv_core_0_altera_axi4_master_1_awvalid,    //                                       .awvalid
		output wire        riscv_core_0_altera_axi4_master_1_awready,    //                                       .awready
		input  wire [63:0] riscv_core_0_altera_axi4_master_1_wdata,      //                                       .wdata
		input  wire [7:0]  riscv_core_0_altera_axi4_master_1_wstrb,      //                                       .wstrb
		input  wire        riscv_core_0_altera_axi4_master_1_wlast,      //                                       .wlast
		input  wire        riscv_core_0_altera_axi4_master_1_wvalid,     //                                       .wvalid
		output wire        riscv_core_0_altera_axi4_master_1_wready,     //                                       .wready
		output wire [0:0]  riscv_core_0_altera_axi4_master_1_bid,        //                                       .bid
		output wire [1:0]  riscv_core_0_altera_axi4_master_1_bresp,      //                                       .bresp
		output wire        riscv_core_0_altera_axi4_master_1_bvalid,     //                                       .bvalid
		input  wire        riscv_core_0_altera_axi4_master_1_bready,     //                                       .bready
		input  wire [0:0]  riscv_core_0_altera_axi4_master_1_arid,       //                                       .arid
		input  wire [31:0] riscv_core_0_altera_axi4_master_1_araddr,     //                                       .araddr
		input  wire [7:0]  riscv_core_0_altera_axi4_master_1_arlen,      //                                       .arlen
		input  wire [2:0]  riscv_core_0_altera_axi4_master_1_arsize,     //                                       .arsize
		input  wire [1:0]  riscv_core_0_altera_axi4_master_1_arburst,    //                                       .arburst
		input  wire [0:0]  riscv_core_0_altera_axi4_master_1_arlock,     //                                       .arlock
		input  wire [3:0]  riscv_core_0_altera_axi4_master_1_arcache,    //                                       .arcache
		input  wire [2:0]  riscv_core_0_altera_axi4_master_1_arprot,     //                                       .arprot
		input  wire [3:0]  riscv_core_0_altera_axi4_master_1_arqos,      //                                       .arqos
		input  wire [3:0]  riscv_core_0_altera_axi4_master_1_arregion,   //                                       .arregion
		input  wire        riscv_core_0_altera_axi4_master_1_arvalid,    //                                       .arvalid
		output wire        riscv_core_0_altera_axi4_master_1_arready,    //                                       .arready
		output wire [0:0]  riscv_core_0_altera_axi4_master_1_rid,        //                                       .rid
		output wire [63:0] riscv_core_0_altera_axi4_master_1_rdata,      //                                       .rdata
		output wire [1:0]  riscv_core_0_altera_axi4_master_1_rresp,      //                                       .rresp
		output wire        riscv_core_0_altera_axi4_master_1_rlast,      //                                       .rlast
		output wire        riscv_core_0_altera_axi4_master_1_rvalid,     //                                       .rvalid
		input  wire        riscv_core_0_altera_axi4_master_1_rready,     //                                       .rready
		input  wire        clk_0_clk_clk,                                //                              clk_0_clk.clk
		input  wire        riscv_core_0_rst_reset_bridge_in_reset_reset, // riscv_core_0_rst_reset_bridge_in_reset.reset
		input  wire        ssram_0_reset_reset_bridge_in_reset_reset,    //    ssram_0_reset_reset_bridge_in_reset.reset
		output wire [19:0] ssram_0_avalon_ssram_slave_address,           //             ssram_0_avalon_ssram_slave.address
		output wire        ssram_0_avalon_ssram_slave_write,             //                                       .write
		output wire        ssram_0_avalon_ssram_slave_read,              //                                       .read
		input  wire [31:0] ssram_0_avalon_ssram_slave_readdata,          //                                       .readdata
		output wire [31:0] ssram_0_avalon_ssram_slave_writedata,         //                                       .writedata
		output wire [2:0]  ssram_0_avalon_ssram_slave_burstcount,        //                                       .burstcount
		output wire [3:0]  ssram_0_avalon_ssram_slave_byteenable,        //                                       .byteenable
		input  wire        ssram_0_avalon_ssram_slave_readdatavalid,     //                                       .readdatavalid
		input  wire        ssram_0_avalon_ssram_slave_waitrequest,       //                                       .waitrequest
		output wire        ssram_0_avalon_ssram_slave_lock,              //                                       .lock
		output wire        ssram_0_avalon_ssram_slave_debugaccess        //                                       .debugaccess
	);

	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_ruser;          // riscv_core_0_altera_axi4_master_1_agent:ruser -> riscv_core_0_altera_axi4_master_1_translator:m0_ruser
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_wuser;          // riscv_core_0_altera_axi4_master_1_translator:m0_wuser -> riscv_core_0_altera_axi4_master_1_agent:wuser
	wire    [1:0] riscv_core_0_altera_axi4_master_1_translator_m0_awburst;        // riscv_core_0_altera_axi4_master_1_translator:m0_awburst -> riscv_core_0_altera_axi4_master_1_agent:awburst
	wire    [3:0] riscv_core_0_altera_axi4_master_1_translator_m0_arregion;       // riscv_core_0_altera_axi4_master_1_translator:m0_arregion -> riscv_core_0_altera_axi4_master_1_agent:arregion
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_awuser;         // riscv_core_0_altera_axi4_master_1_translator:m0_awuser -> riscv_core_0_altera_axi4_master_1_agent:awuser
	wire    [7:0] riscv_core_0_altera_axi4_master_1_translator_m0_arlen;          // riscv_core_0_altera_axi4_master_1_translator:m0_arlen -> riscv_core_0_altera_axi4_master_1_agent:arlen
	wire    [3:0] riscv_core_0_altera_axi4_master_1_translator_m0_arqos;          // riscv_core_0_altera_axi4_master_1_translator:m0_arqos -> riscv_core_0_altera_axi4_master_1_agent:arqos
	wire    [7:0] riscv_core_0_altera_axi4_master_1_translator_m0_wstrb;          // riscv_core_0_altera_axi4_master_1_translator:m0_wstrb -> riscv_core_0_altera_axi4_master_1_agent:wstrb
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_wready;         // riscv_core_0_altera_axi4_master_1_agent:wready -> riscv_core_0_altera_axi4_master_1_translator:m0_wready
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_rid;            // riscv_core_0_altera_axi4_master_1_agent:rid -> riscv_core_0_altera_axi4_master_1_translator:m0_rid
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_rready;         // riscv_core_0_altera_axi4_master_1_translator:m0_rready -> riscv_core_0_altera_axi4_master_1_agent:rready
	wire    [7:0] riscv_core_0_altera_axi4_master_1_translator_m0_awlen;          // riscv_core_0_altera_axi4_master_1_translator:m0_awlen -> riscv_core_0_altera_axi4_master_1_agent:awlen
	wire    [3:0] riscv_core_0_altera_axi4_master_1_translator_m0_awqos;          // riscv_core_0_altera_axi4_master_1_translator:m0_awqos -> riscv_core_0_altera_axi4_master_1_agent:awqos
	wire    [3:0] riscv_core_0_altera_axi4_master_1_translator_m0_arcache;        // riscv_core_0_altera_axi4_master_1_translator:m0_arcache -> riscv_core_0_altera_axi4_master_1_agent:arcache
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_wvalid;         // riscv_core_0_altera_axi4_master_1_translator:m0_wvalid -> riscv_core_0_altera_axi4_master_1_agent:wvalid
	wire   [31:0] riscv_core_0_altera_axi4_master_1_translator_m0_araddr;         // riscv_core_0_altera_axi4_master_1_translator:m0_araddr -> riscv_core_0_altera_axi4_master_1_agent:araddr
	wire    [2:0] riscv_core_0_altera_axi4_master_1_translator_m0_arprot;         // riscv_core_0_altera_axi4_master_1_translator:m0_arprot -> riscv_core_0_altera_axi4_master_1_agent:arprot
	wire    [2:0] riscv_core_0_altera_axi4_master_1_translator_m0_awprot;         // riscv_core_0_altera_axi4_master_1_translator:m0_awprot -> riscv_core_0_altera_axi4_master_1_agent:awprot
	wire   [63:0] riscv_core_0_altera_axi4_master_1_translator_m0_wdata;          // riscv_core_0_altera_axi4_master_1_translator:m0_wdata -> riscv_core_0_altera_axi4_master_1_agent:wdata
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_arvalid;        // riscv_core_0_altera_axi4_master_1_translator:m0_arvalid -> riscv_core_0_altera_axi4_master_1_agent:arvalid
	wire    [3:0] riscv_core_0_altera_axi4_master_1_translator_m0_awcache;        // riscv_core_0_altera_axi4_master_1_translator:m0_awcache -> riscv_core_0_altera_axi4_master_1_agent:awcache
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_arid;           // riscv_core_0_altera_axi4_master_1_translator:m0_arid -> riscv_core_0_altera_axi4_master_1_agent:arid
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_arlock;         // riscv_core_0_altera_axi4_master_1_translator:m0_arlock -> riscv_core_0_altera_axi4_master_1_agent:arlock
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_awlock;         // riscv_core_0_altera_axi4_master_1_translator:m0_awlock -> riscv_core_0_altera_axi4_master_1_agent:awlock
	wire   [31:0] riscv_core_0_altera_axi4_master_1_translator_m0_awaddr;         // riscv_core_0_altera_axi4_master_1_translator:m0_awaddr -> riscv_core_0_altera_axi4_master_1_agent:awaddr
	wire    [1:0] riscv_core_0_altera_axi4_master_1_translator_m0_bresp;          // riscv_core_0_altera_axi4_master_1_agent:bresp -> riscv_core_0_altera_axi4_master_1_translator:m0_bresp
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_arready;        // riscv_core_0_altera_axi4_master_1_agent:arready -> riscv_core_0_altera_axi4_master_1_translator:m0_arready
	wire   [63:0] riscv_core_0_altera_axi4_master_1_translator_m0_rdata;          // riscv_core_0_altera_axi4_master_1_agent:rdata -> riscv_core_0_altera_axi4_master_1_translator:m0_rdata
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_awready;        // riscv_core_0_altera_axi4_master_1_agent:awready -> riscv_core_0_altera_axi4_master_1_translator:m0_awready
	wire    [1:0] riscv_core_0_altera_axi4_master_1_translator_m0_arburst;        // riscv_core_0_altera_axi4_master_1_translator:m0_arburst -> riscv_core_0_altera_axi4_master_1_agent:arburst
	wire    [2:0] riscv_core_0_altera_axi4_master_1_translator_m0_arsize;         // riscv_core_0_altera_axi4_master_1_translator:m0_arsize -> riscv_core_0_altera_axi4_master_1_agent:arsize
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_bready;         // riscv_core_0_altera_axi4_master_1_translator:m0_bready -> riscv_core_0_altera_axi4_master_1_agent:bready
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_rlast;          // riscv_core_0_altera_axi4_master_1_agent:rlast -> riscv_core_0_altera_axi4_master_1_translator:m0_rlast
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_wlast;          // riscv_core_0_altera_axi4_master_1_translator:m0_wlast -> riscv_core_0_altera_axi4_master_1_agent:wlast
	wire    [3:0] riscv_core_0_altera_axi4_master_1_translator_m0_awregion;       // riscv_core_0_altera_axi4_master_1_translator:m0_awregion -> riscv_core_0_altera_axi4_master_1_agent:awregion
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_buser;          // riscv_core_0_altera_axi4_master_1_agent:buser -> riscv_core_0_altera_axi4_master_1_translator:m0_buser
	wire    [1:0] riscv_core_0_altera_axi4_master_1_translator_m0_rresp;          // riscv_core_0_altera_axi4_master_1_agent:rresp -> riscv_core_0_altera_axi4_master_1_translator:m0_rresp
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_awid;           // riscv_core_0_altera_axi4_master_1_translator:m0_awid -> riscv_core_0_altera_axi4_master_1_agent:awid
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_bid;            // riscv_core_0_altera_axi4_master_1_agent:bid -> riscv_core_0_altera_axi4_master_1_translator:m0_bid
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_bvalid;         // riscv_core_0_altera_axi4_master_1_agent:bvalid -> riscv_core_0_altera_axi4_master_1_translator:m0_bvalid
	wire    [2:0] riscv_core_0_altera_axi4_master_1_translator_m0_awsize;         // riscv_core_0_altera_axi4_master_1_translator:m0_awsize -> riscv_core_0_altera_axi4_master_1_agent:awsize
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_awvalid;        // riscv_core_0_altera_axi4_master_1_translator:m0_awvalid -> riscv_core_0_altera_axi4_master_1_agent:awvalid
	wire    [0:0] riscv_core_0_altera_axi4_master_1_translator_m0_aruser;         // riscv_core_0_altera_axi4_master_1_translator:m0_aruser -> riscv_core_0_altera_axi4_master_1_agent:aruser
	wire          riscv_core_0_altera_axi4_master_1_translator_m0_rvalid;         // riscv_core_0_altera_axi4_master_1_agent:rvalid -> riscv_core_0_altera_axi4_master_1_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                              // rsp_mux:src_valid -> riscv_core_0_altera_axi4_master_1_agent:write_rp_valid
	wire  [156:0] rsp_mux_src_data;                                               // rsp_mux:src_data -> riscv_core_0_altera_axi4_master_1_agent:write_rp_data
	wire          rsp_mux_src_ready;                                              // riscv_core_0_altera_axi4_master_1_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                            // rsp_mux:src_channel -> riscv_core_0_altera_axi4_master_1_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                      // rsp_mux:src_startofpacket -> riscv_core_0_altera_axi4_master_1_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                        // rsp_mux:src_endofpacket -> riscv_core_0_altera_axi4_master_1_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                          // rsp_mux_001:src_valid -> riscv_core_0_altera_axi4_master_1_agent:read_rp_valid
	wire  [156:0] rsp_mux_001_src_data;                                           // rsp_mux_001:src_data -> riscv_core_0_altera_axi4_master_1_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                          // riscv_core_0_altera_axi4_master_1_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                        // rsp_mux_001:src_channel -> riscv_core_0_altera_axi4_master_1_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                  // rsp_mux_001:src_startofpacket -> riscv_core_0_altera_axi4_master_1_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                    // rsp_mux_001:src_endofpacket -> riscv_core_0_altera_axi4_master_1_agent:read_rp_endofpacket
	wire   [31:0] ssram_0_avalon_ssram_slave_agent_m0_readdata;                   // ssram_0_avalon_ssram_slave_translator:uav_readdata -> ssram_0_avalon_ssram_slave_agent:m0_readdata
	wire          ssram_0_avalon_ssram_slave_agent_m0_waitrequest;                // ssram_0_avalon_ssram_slave_translator:uav_waitrequest -> ssram_0_avalon_ssram_slave_agent:m0_waitrequest
	wire          ssram_0_avalon_ssram_slave_agent_m0_debugaccess;                // ssram_0_avalon_ssram_slave_agent:m0_debugaccess -> ssram_0_avalon_ssram_slave_translator:uav_debugaccess
	wire   [31:0] ssram_0_avalon_ssram_slave_agent_m0_address;                    // ssram_0_avalon_ssram_slave_agent:m0_address -> ssram_0_avalon_ssram_slave_translator:uav_address
	wire    [3:0] ssram_0_avalon_ssram_slave_agent_m0_byteenable;                 // ssram_0_avalon_ssram_slave_agent:m0_byteenable -> ssram_0_avalon_ssram_slave_translator:uav_byteenable
	wire          ssram_0_avalon_ssram_slave_agent_m0_read;                       // ssram_0_avalon_ssram_slave_agent:m0_read -> ssram_0_avalon_ssram_slave_translator:uav_read
	wire          ssram_0_avalon_ssram_slave_agent_m0_readdatavalid;              // ssram_0_avalon_ssram_slave_translator:uav_readdatavalid -> ssram_0_avalon_ssram_slave_agent:m0_readdatavalid
	wire          ssram_0_avalon_ssram_slave_agent_m0_lock;                       // ssram_0_avalon_ssram_slave_agent:m0_lock -> ssram_0_avalon_ssram_slave_translator:uav_lock
	wire   [31:0] ssram_0_avalon_ssram_slave_agent_m0_writedata;                  // ssram_0_avalon_ssram_slave_agent:m0_writedata -> ssram_0_avalon_ssram_slave_translator:uav_writedata
	wire          ssram_0_avalon_ssram_slave_agent_m0_write;                      // ssram_0_avalon_ssram_slave_agent:m0_write -> ssram_0_avalon_ssram_slave_translator:uav_write
	wire    [2:0] ssram_0_avalon_ssram_slave_agent_m0_burstcount;                 // ssram_0_avalon_ssram_slave_agent:m0_burstcount -> ssram_0_avalon_ssram_slave_translator:uav_burstcount
	wire          ssram_0_avalon_ssram_slave_agent_rf_source_valid;               // ssram_0_avalon_ssram_slave_agent:rf_source_valid -> ssram_0_avalon_ssram_slave_agent_rsp_fifo:in_valid
	wire  [121:0] ssram_0_avalon_ssram_slave_agent_rf_source_data;                // ssram_0_avalon_ssram_slave_agent:rf_source_data -> ssram_0_avalon_ssram_slave_agent_rsp_fifo:in_data
	wire          ssram_0_avalon_ssram_slave_agent_rf_source_ready;               // ssram_0_avalon_ssram_slave_agent_rsp_fifo:in_ready -> ssram_0_avalon_ssram_slave_agent:rf_source_ready
	wire          ssram_0_avalon_ssram_slave_agent_rf_source_startofpacket;       // ssram_0_avalon_ssram_slave_agent:rf_source_startofpacket -> ssram_0_avalon_ssram_slave_agent_rsp_fifo:in_startofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rf_source_endofpacket;         // ssram_0_avalon_ssram_slave_agent:rf_source_endofpacket -> ssram_0_avalon_ssram_slave_agent_rsp_fifo:in_endofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_valid;            // ssram_0_avalon_ssram_slave_agent_rsp_fifo:out_valid -> ssram_0_avalon_ssram_slave_agent:rf_sink_valid
	wire  [121:0] ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_data;             // ssram_0_avalon_ssram_slave_agent_rsp_fifo:out_data -> ssram_0_avalon_ssram_slave_agent:rf_sink_data
	wire          ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_ready;            // ssram_0_avalon_ssram_slave_agent:rf_sink_ready -> ssram_0_avalon_ssram_slave_agent_rsp_fifo:out_ready
	wire          ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_startofpacket;    // ssram_0_avalon_ssram_slave_agent_rsp_fifo:out_startofpacket -> ssram_0_avalon_ssram_slave_agent:rf_sink_startofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_endofpacket;      // ssram_0_avalon_ssram_slave_agent_rsp_fifo:out_endofpacket -> ssram_0_avalon_ssram_slave_agent:rf_sink_endofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_valid;          // ssram_0_avalon_ssram_slave_agent:rdata_fifo_src_valid -> ssram_0_avalon_ssram_slave_agent_rdata_fifo:in_valid
	wire   [33:0] ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_data;           // ssram_0_avalon_ssram_slave_agent:rdata_fifo_src_data -> ssram_0_avalon_ssram_slave_agent_rdata_fifo:in_data
	wire          ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_ready;          // ssram_0_avalon_ssram_slave_agent_rdata_fifo:in_ready -> ssram_0_avalon_ssram_slave_agent:rdata_fifo_src_ready
	wire          riscv_core_0_altera_axi4_master_1_agent_write_cp_valid;         // riscv_core_0_altera_axi4_master_1_agent:write_cp_valid -> router:sink_valid
	wire  [156:0] riscv_core_0_altera_axi4_master_1_agent_write_cp_data;          // riscv_core_0_altera_axi4_master_1_agent:write_cp_data -> router:sink_data
	wire          riscv_core_0_altera_axi4_master_1_agent_write_cp_ready;         // router:sink_ready -> riscv_core_0_altera_axi4_master_1_agent:write_cp_ready
	wire          riscv_core_0_altera_axi4_master_1_agent_write_cp_startofpacket; // riscv_core_0_altera_axi4_master_1_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          riscv_core_0_altera_axi4_master_1_agent_write_cp_endofpacket;   // riscv_core_0_altera_axi4_master_1_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [156:0] router_src_data;                                                // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                               // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          riscv_core_0_altera_axi4_master_1_agent_read_cp_valid;          // riscv_core_0_altera_axi4_master_1_agent:read_cp_valid -> router_001:sink_valid
	wire  [156:0] riscv_core_0_altera_axi4_master_1_agent_read_cp_data;           // riscv_core_0_altera_axi4_master_1_agent:read_cp_data -> router_001:sink_data
	wire          riscv_core_0_altera_axi4_master_1_agent_read_cp_ready;          // router_001:sink_ready -> riscv_core_0_altera_axi4_master_1_agent:read_cp_ready
	wire          riscv_core_0_altera_axi4_master_1_agent_read_cp_startofpacket;  // riscv_core_0_altera_axi4_master_1_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          riscv_core_0_altera_axi4_master_1_agent_read_cp_endofpacket;    // riscv_core_0_altera_axi4_master_1_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [156:0] router_001_src_data;                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rp_valid;                      // ssram_0_avalon_ssram_slave_agent:rp_valid -> router_002:sink_valid
	wire  [120:0] ssram_0_avalon_ssram_slave_agent_rp_data;                       // ssram_0_avalon_ssram_slave_agent:rp_data -> router_002:sink_data
	wire          ssram_0_avalon_ssram_slave_agent_rp_ready;                      // router_002:sink_ready -> ssram_0_avalon_ssram_slave_agent:rp_ready
	wire          ssram_0_avalon_ssram_slave_agent_rp_startofpacket;              // ssram_0_avalon_ssram_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rp_endofpacket;                // ssram_0_avalon_ssram_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          ssram_0_avalon_ssram_slave_burst_adapter_source0_valid;         // ssram_0_avalon_ssram_slave_burst_adapter:source0_valid -> ssram_0_avalon_ssram_slave_agent:cp_valid
	wire  [120:0] ssram_0_avalon_ssram_slave_burst_adapter_source0_data;          // ssram_0_avalon_ssram_slave_burst_adapter:source0_data -> ssram_0_avalon_ssram_slave_agent:cp_data
	wire          ssram_0_avalon_ssram_slave_burst_adapter_source0_ready;         // ssram_0_avalon_ssram_slave_agent:cp_ready -> ssram_0_avalon_ssram_slave_burst_adapter:source0_ready
	wire    [1:0] ssram_0_avalon_ssram_slave_burst_adapter_source0_channel;       // ssram_0_avalon_ssram_slave_burst_adapter:source0_channel -> ssram_0_avalon_ssram_slave_agent:cp_channel
	wire          ssram_0_avalon_ssram_slave_burst_adapter_source0_startofpacket; // ssram_0_avalon_ssram_slave_burst_adapter:source0_startofpacket -> ssram_0_avalon_ssram_slave_agent:cp_startofpacket
	wire          ssram_0_avalon_ssram_slave_burst_adapter_source0_endofpacket;   // ssram_0_avalon_ssram_slave_burst_adapter:source0_endofpacket -> ssram_0_avalon_ssram_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [156:0] cmd_demux_src0_data;                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                       // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [156:0] cmd_demux_001_src0_data;                                        // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                       // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                     // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                               // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                 // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [156:0] rsp_demux_src0_data;                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                           // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [156:0] rsp_demux_src1_data;                                            // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                           // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                         // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                   // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                     // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          router_002_src_valid;                                           // router_002:src_valid -> ssram_0_avalon_ssram_slave_rsp_width_adapter:in_valid
	wire  [120:0] router_002_src_data;                                            // router_002:src_data -> ssram_0_avalon_ssram_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                           // ssram_0_avalon_ssram_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                         // router_002:src_channel -> ssram_0_avalon_ssram_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                   // router_002:src_startofpacket -> ssram_0_avalon_ssram_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                     // router_002:src_endofpacket -> ssram_0_avalon_ssram_slave_rsp_width_adapter:in_endofpacket
	wire          ssram_0_avalon_ssram_slave_rsp_width_adapter_src_valid;         // ssram_0_avalon_ssram_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [156:0] ssram_0_avalon_ssram_slave_rsp_width_adapter_src_data;          // ssram_0_avalon_ssram_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          ssram_0_avalon_ssram_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> ssram_0_avalon_ssram_slave_rsp_width_adapter:out_ready
	wire    [1:0] ssram_0_avalon_ssram_slave_rsp_width_adapter_src_channel;       // ssram_0_avalon_ssram_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          ssram_0_avalon_ssram_slave_rsp_width_adapter_src_startofpacket; // ssram_0_avalon_ssram_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          ssram_0_avalon_ssram_slave_rsp_width_adapter_src_endofpacket;   // ssram_0_avalon_ssram_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                              // cmd_mux:src_valid -> ssram_0_avalon_ssram_slave_cmd_width_adapter:in_valid
	wire  [156:0] cmd_mux_src_data;                                               // cmd_mux:src_data -> ssram_0_avalon_ssram_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                              // ssram_0_avalon_ssram_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                            // cmd_mux:src_channel -> ssram_0_avalon_ssram_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                      // cmd_mux:src_startofpacket -> ssram_0_avalon_ssram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                        // cmd_mux:src_endofpacket -> ssram_0_avalon_ssram_slave_cmd_width_adapter:in_endofpacket
	wire          ssram_0_avalon_ssram_slave_cmd_width_adapter_src_valid;         // ssram_0_avalon_ssram_slave_cmd_width_adapter:out_valid -> ssram_0_avalon_ssram_slave_burst_adapter:sink0_valid
	wire  [120:0] ssram_0_avalon_ssram_slave_cmd_width_adapter_src_data;          // ssram_0_avalon_ssram_slave_cmd_width_adapter:out_data -> ssram_0_avalon_ssram_slave_burst_adapter:sink0_data
	wire          ssram_0_avalon_ssram_slave_cmd_width_adapter_src_ready;         // ssram_0_avalon_ssram_slave_burst_adapter:sink0_ready -> ssram_0_avalon_ssram_slave_cmd_width_adapter:out_ready
	wire    [1:0] ssram_0_avalon_ssram_slave_cmd_width_adapter_src_channel;       // ssram_0_avalon_ssram_slave_cmd_width_adapter:out_channel -> ssram_0_avalon_ssram_slave_burst_adapter:sink0_channel
	wire          ssram_0_avalon_ssram_slave_cmd_width_adapter_src_startofpacket; // ssram_0_avalon_ssram_slave_cmd_width_adapter:out_startofpacket -> ssram_0_avalon_ssram_slave_burst_adapter:sink0_startofpacket
	wire          ssram_0_avalon_ssram_slave_cmd_width_adapter_src_endofpacket;   // ssram_0_avalon_ssram_slave_cmd_width_adapter:out_endofpacket -> ssram_0_avalon_ssram_slave_burst_adapter:sink0_endofpacket
	wire          ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_valid;          // ssram_0_avalon_ssram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_data;           // ssram_0_avalon_ssram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> ssram_0_avalon_ssram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                  // avalon_st_adapter:out_0_valid -> ssram_0_avalon_ssram_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                   // avalon_st_adapter:out_0_data -> ssram_0_avalon_ssram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                  // ssram_0_avalon_ssram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                  // avalon_st_adapter:out_0_error -> ssram_0_avalon_ssram_slave_agent:rdata_fifo_sink_error

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) riscv_core_0_altera_axi4_master_1_translator (
		.aclk        (clk_0_clk_clk),                                            //       clk.clk
		.aresetn     (~riscv_core_0_rst_reset_bridge_in_reset_reset),            // clk_reset.reset_n
		.m0_awid     (riscv_core_0_altera_axi4_master_1_translator_m0_awid),     //        m0.awid
		.m0_awaddr   (riscv_core_0_altera_axi4_master_1_translator_m0_awaddr),   //          .awaddr
		.m0_awlen    (riscv_core_0_altera_axi4_master_1_translator_m0_awlen),    //          .awlen
		.m0_awsize   (riscv_core_0_altera_axi4_master_1_translator_m0_awsize),   //          .awsize
		.m0_awburst  (riscv_core_0_altera_axi4_master_1_translator_m0_awburst),  //          .awburst
		.m0_awlock   (riscv_core_0_altera_axi4_master_1_translator_m0_awlock),   //          .awlock
		.m0_awcache  (riscv_core_0_altera_axi4_master_1_translator_m0_awcache),  //          .awcache
		.m0_awprot   (riscv_core_0_altera_axi4_master_1_translator_m0_awprot),   //          .awprot
		.m0_awuser   (riscv_core_0_altera_axi4_master_1_translator_m0_awuser),   //          .awuser
		.m0_awqos    (riscv_core_0_altera_axi4_master_1_translator_m0_awqos),    //          .awqos
		.m0_awregion (riscv_core_0_altera_axi4_master_1_translator_m0_awregion), //          .awregion
		.m0_awvalid  (riscv_core_0_altera_axi4_master_1_translator_m0_awvalid),  //          .awvalid
		.m0_awready  (riscv_core_0_altera_axi4_master_1_translator_m0_awready),  //          .awready
		.m0_wdata    (riscv_core_0_altera_axi4_master_1_translator_m0_wdata),    //          .wdata
		.m0_wstrb    (riscv_core_0_altera_axi4_master_1_translator_m0_wstrb),    //          .wstrb
		.m0_wlast    (riscv_core_0_altera_axi4_master_1_translator_m0_wlast),    //          .wlast
		.m0_wvalid   (riscv_core_0_altera_axi4_master_1_translator_m0_wvalid),   //          .wvalid
		.m0_wuser    (riscv_core_0_altera_axi4_master_1_translator_m0_wuser),    //          .wuser
		.m0_wready   (riscv_core_0_altera_axi4_master_1_translator_m0_wready),   //          .wready
		.m0_bid      (riscv_core_0_altera_axi4_master_1_translator_m0_bid),      //          .bid
		.m0_bresp    (riscv_core_0_altera_axi4_master_1_translator_m0_bresp),    //          .bresp
		.m0_buser    (riscv_core_0_altera_axi4_master_1_translator_m0_buser),    //          .buser
		.m0_bvalid   (riscv_core_0_altera_axi4_master_1_translator_m0_bvalid),   //          .bvalid
		.m0_bready   (riscv_core_0_altera_axi4_master_1_translator_m0_bready),   //          .bready
		.m0_arid     (riscv_core_0_altera_axi4_master_1_translator_m0_arid),     //          .arid
		.m0_araddr   (riscv_core_0_altera_axi4_master_1_translator_m0_araddr),   //          .araddr
		.m0_arlen    (riscv_core_0_altera_axi4_master_1_translator_m0_arlen),    //          .arlen
		.m0_arsize   (riscv_core_0_altera_axi4_master_1_translator_m0_arsize),   //          .arsize
		.m0_arburst  (riscv_core_0_altera_axi4_master_1_translator_m0_arburst),  //          .arburst
		.m0_arlock   (riscv_core_0_altera_axi4_master_1_translator_m0_arlock),   //          .arlock
		.m0_arcache  (riscv_core_0_altera_axi4_master_1_translator_m0_arcache),  //          .arcache
		.m0_arprot   (riscv_core_0_altera_axi4_master_1_translator_m0_arprot),   //          .arprot
		.m0_aruser   (riscv_core_0_altera_axi4_master_1_translator_m0_aruser),   //          .aruser
		.m0_arqos    (riscv_core_0_altera_axi4_master_1_translator_m0_arqos),    //          .arqos
		.m0_arregion (riscv_core_0_altera_axi4_master_1_translator_m0_arregion), //          .arregion
		.m0_arvalid  (riscv_core_0_altera_axi4_master_1_translator_m0_arvalid),  //          .arvalid
		.m0_arready  (riscv_core_0_altera_axi4_master_1_translator_m0_arready),  //          .arready
		.m0_rid      (riscv_core_0_altera_axi4_master_1_translator_m0_rid),      //          .rid
		.m0_rdata    (riscv_core_0_altera_axi4_master_1_translator_m0_rdata),    //          .rdata
		.m0_rresp    (riscv_core_0_altera_axi4_master_1_translator_m0_rresp),    //          .rresp
		.m0_rlast    (riscv_core_0_altera_axi4_master_1_translator_m0_rlast),    //          .rlast
		.m0_rvalid   (riscv_core_0_altera_axi4_master_1_translator_m0_rvalid),   //          .rvalid
		.m0_rready   (riscv_core_0_altera_axi4_master_1_translator_m0_rready),   //          .rready
		.m0_ruser    (riscv_core_0_altera_axi4_master_1_translator_m0_ruser),    //          .ruser
		.s0_awid     (riscv_core_0_altera_axi4_master_1_awid),                   //        s0.awid
		.s0_awaddr   (riscv_core_0_altera_axi4_master_1_awaddr),                 //          .awaddr
		.s0_awlen    (riscv_core_0_altera_axi4_master_1_awlen),                  //          .awlen
		.s0_awsize   (riscv_core_0_altera_axi4_master_1_awsize),                 //          .awsize
		.s0_awburst  (riscv_core_0_altera_axi4_master_1_awburst),                //          .awburst
		.s0_awlock   (riscv_core_0_altera_axi4_master_1_awlock),                 //          .awlock
		.s0_awcache  (riscv_core_0_altera_axi4_master_1_awcache),                //          .awcache
		.s0_awprot   (riscv_core_0_altera_axi4_master_1_awprot),                 //          .awprot
		.s0_awqos    (riscv_core_0_altera_axi4_master_1_awqos),                  //          .awqos
		.s0_awregion (riscv_core_0_altera_axi4_master_1_awregion),               //          .awregion
		.s0_awvalid  (riscv_core_0_altera_axi4_master_1_awvalid),                //          .awvalid
		.s0_awready  (riscv_core_0_altera_axi4_master_1_awready),                //          .awready
		.s0_wdata    (riscv_core_0_altera_axi4_master_1_wdata),                  //          .wdata
		.s0_wstrb    (riscv_core_0_altera_axi4_master_1_wstrb),                  //          .wstrb
		.s0_wlast    (riscv_core_0_altera_axi4_master_1_wlast),                  //          .wlast
		.s0_wvalid   (riscv_core_0_altera_axi4_master_1_wvalid),                 //          .wvalid
		.s0_wready   (riscv_core_0_altera_axi4_master_1_wready),                 //          .wready
		.s0_bid      (riscv_core_0_altera_axi4_master_1_bid),                    //          .bid
		.s0_bresp    (riscv_core_0_altera_axi4_master_1_bresp),                  //          .bresp
		.s0_bvalid   (riscv_core_0_altera_axi4_master_1_bvalid),                 //          .bvalid
		.s0_bready   (riscv_core_0_altera_axi4_master_1_bready),                 //          .bready
		.s0_arid     (riscv_core_0_altera_axi4_master_1_arid),                   //          .arid
		.s0_araddr   (riscv_core_0_altera_axi4_master_1_araddr),                 //          .araddr
		.s0_arlen    (riscv_core_0_altera_axi4_master_1_arlen),                  //          .arlen
		.s0_arsize   (riscv_core_0_altera_axi4_master_1_arsize),                 //          .arsize
		.s0_arburst  (riscv_core_0_altera_axi4_master_1_arburst),                //          .arburst
		.s0_arlock   (riscv_core_0_altera_axi4_master_1_arlock),                 //          .arlock
		.s0_arcache  (riscv_core_0_altera_axi4_master_1_arcache),                //          .arcache
		.s0_arprot   (riscv_core_0_altera_axi4_master_1_arprot),                 //          .arprot
		.s0_arqos    (riscv_core_0_altera_axi4_master_1_arqos),                  //          .arqos
		.s0_arregion (riscv_core_0_altera_axi4_master_1_arregion),               //          .arregion
		.s0_arvalid  (riscv_core_0_altera_axi4_master_1_arvalid),                //          .arvalid
		.s0_arready  (riscv_core_0_altera_axi4_master_1_arready),                //          .arready
		.s0_rid      (riscv_core_0_altera_axi4_master_1_rid),                    //          .rid
		.s0_rdata    (riscv_core_0_altera_axi4_master_1_rdata),                  //          .rdata
		.s0_rresp    (riscv_core_0_altera_axi4_master_1_rresp),                  //          .rresp
		.s0_rlast    (riscv_core_0_altera_axi4_master_1_rlast),                  //          .rlast
		.s0_rvalid   (riscv_core_0_altera_axi4_master_1_rvalid),                 //          .rvalid
		.s0_rready   (riscv_core_0_altera_axi4_master_1_rready),                 //          .rready
		.s0_awuser   (1'b0),                                                     // (terminated)
		.s0_wuser    (1'b0),                                                     // (terminated)
		.s0_buser    (),                                                         // (terminated)
		.s0_aruser   (1'b0),                                                     // (terminated)
		.s0_ruser    (),                                                         // (terminated)
		.s0_wid      (1'b0),                                                     // (terminated)
		.m0_wid      ()                                                          // (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ssram_0_avalon_ssram_slave_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (riscv_core_0_rst_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (ssram_0_avalon_ssram_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ssram_0_avalon_ssram_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ssram_0_avalon_ssram_slave_agent_m0_read),          //                         .read
		.uav_write              (ssram_0_avalon_ssram_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (ssram_0_avalon_ssram_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ssram_0_avalon_ssram_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ssram_0_avalon_ssram_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ssram_0_avalon_ssram_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ssram_0_avalon_ssram_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ssram_0_avalon_ssram_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ssram_0_avalon_ssram_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (ssram_0_avalon_ssram_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (ssram_0_avalon_ssram_slave_write),                  //                         .write
		.av_read                (ssram_0_avalon_ssram_slave_read),                   //                         .read
		.av_readdata            (ssram_0_avalon_ssram_slave_readdata),               //                         .readdata
		.av_writedata           (ssram_0_avalon_ssram_slave_writedata),              //                         .writedata
		.av_burstcount          (ssram_0_avalon_ssram_slave_burstcount),             //                         .burstcount
		.av_byteenable          (ssram_0_avalon_ssram_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (ssram_0_avalon_ssram_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (ssram_0_avalon_ssram_slave_waitrequest),            //                         .waitrequest
		.av_lock                (ssram_0_avalon_ssram_slave_lock),                   //                         .lock
		.av_debugaccess         (ssram_0_avalon_ssram_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (137),
		.PKT_CACHE_H               (151),
		.PKT_CACHE_L               (148),
		.PKT_ADDR_SIDEBAND_H       (135),
		.PKT_ADDR_SIDEBAND_L       (135),
		.PKT_PROTECTION_H          (147),
		.PKT_PROTECTION_L          (145),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_RESPONSE_STATUS_L     (152),
		.PKT_RESPONSE_STATUS_H     (153),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (142),
		.PKT_DEST_ID_H             (143),
		.PKT_DEST_ID_L             (143),
		.PKT_THREAD_ID_H           (144),
		.PKT_THREAD_ID_L           (144),
		.PKT_QOS_L                 (138),
		.PKT_QOS_H                 (141),
		.PKT_ORI_BURST_SIZE_L      (154),
		.PKT_ORI_BURST_SIZE_H      (156),
		.PKT_DATA_SIDEBAND_H       (136),
		.PKT_DATA_SIDEBAND_L       (136),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) riscv_core_0_altera_axi4_master_1_agent (
		.aclk                   (clk_0_clk_clk),                                                  //              clk.clk
		.aresetn                (~riscv_core_0_rst_reset_bridge_in_reset_reset),                  //        clk_reset.reset_n
		.write_cp_valid         (riscv_core_0_altera_axi4_master_1_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (riscv_core_0_altera_axi4_master_1_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (riscv_core_0_altera_axi4_master_1_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (riscv_core_0_altera_axi4_master_1_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (riscv_core_0_altera_axi4_master_1_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                              //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                               //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                            //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                      //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                        //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                              //                 .ready
		.read_cp_valid          (riscv_core_0_altera_axi4_master_1_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (riscv_core_0_altera_axi4_master_1_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (riscv_core_0_altera_axi4_master_1_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (riscv_core_0_altera_axi4_master_1_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (riscv_core_0_altera_axi4_master_1_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                          //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                           //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                        //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                  //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                    //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                          //                 .ready
		.awid                   (riscv_core_0_altera_axi4_master_1_translator_m0_awid),           // altera_axi_slave.awid
		.awaddr                 (riscv_core_0_altera_axi4_master_1_translator_m0_awaddr),         //                 .awaddr
		.awlen                  (riscv_core_0_altera_axi4_master_1_translator_m0_awlen),          //                 .awlen
		.awsize                 (riscv_core_0_altera_axi4_master_1_translator_m0_awsize),         //                 .awsize
		.awburst                (riscv_core_0_altera_axi4_master_1_translator_m0_awburst),        //                 .awburst
		.awlock                 (riscv_core_0_altera_axi4_master_1_translator_m0_awlock),         //                 .awlock
		.awcache                (riscv_core_0_altera_axi4_master_1_translator_m0_awcache),        //                 .awcache
		.awprot                 (riscv_core_0_altera_axi4_master_1_translator_m0_awprot),         //                 .awprot
		.awuser                 (riscv_core_0_altera_axi4_master_1_translator_m0_awuser),         //                 .awuser
		.awqos                  (riscv_core_0_altera_axi4_master_1_translator_m0_awqos),          //                 .awqos
		.awregion               (riscv_core_0_altera_axi4_master_1_translator_m0_awregion),       //                 .awregion
		.awvalid                (riscv_core_0_altera_axi4_master_1_translator_m0_awvalid),        //                 .awvalid
		.awready                (riscv_core_0_altera_axi4_master_1_translator_m0_awready),        //                 .awready
		.wdata                  (riscv_core_0_altera_axi4_master_1_translator_m0_wdata),          //                 .wdata
		.wstrb                  (riscv_core_0_altera_axi4_master_1_translator_m0_wstrb),          //                 .wstrb
		.wlast                  (riscv_core_0_altera_axi4_master_1_translator_m0_wlast),          //                 .wlast
		.wvalid                 (riscv_core_0_altera_axi4_master_1_translator_m0_wvalid),         //                 .wvalid
		.wuser                  (riscv_core_0_altera_axi4_master_1_translator_m0_wuser),          //                 .wuser
		.wready                 (riscv_core_0_altera_axi4_master_1_translator_m0_wready),         //                 .wready
		.bid                    (riscv_core_0_altera_axi4_master_1_translator_m0_bid),            //                 .bid
		.bresp                  (riscv_core_0_altera_axi4_master_1_translator_m0_bresp),          //                 .bresp
		.buser                  (riscv_core_0_altera_axi4_master_1_translator_m0_buser),          //                 .buser
		.bvalid                 (riscv_core_0_altera_axi4_master_1_translator_m0_bvalid),         //                 .bvalid
		.bready                 (riscv_core_0_altera_axi4_master_1_translator_m0_bready),         //                 .bready
		.arid                   (riscv_core_0_altera_axi4_master_1_translator_m0_arid),           //                 .arid
		.araddr                 (riscv_core_0_altera_axi4_master_1_translator_m0_araddr),         //                 .araddr
		.arlen                  (riscv_core_0_altera_axi4_master_1_translator_m0_arlen),          //                 .arlen
		.arsize                 (riscv_core_0_altera_axi4_master_1_translator_m0_arsize),         //                 .arsize
		.arburst                (riscv_core_0_altera_axi4_master_1_translator_m0_arburst),        //                 .arburst
		.arlock                 (riscv_core_0_altera_axi4_master_1_translator_m0_arlock),         //                 .arlock
		.arcache                (riscv_core_0_altera_axi4_master_1_translator_m0_arcache),        //                 .arcache
		.arprot                 (riscv_core_0_altera_axi4_master_1_translator_m0_arprot),         //                 .arprot
		.aruser                 (riscv_core_0_altera_axi4_master_1_translator_m0_aruser),         //                 .aruser
		.arqos                  (riscv_core_0_altera_axi4_master_1_translator_m0_arqos),          //                 .arqos
		.arregion               (riscv_core_0_altera_axi4_master_1_translator_m0_arregion),       //                 .arregion
		.arvalid                (riscv_core_0_altera_axi4_master_1_translator_m0_arvalid),        //                 .arvalid
		.arready                (riscv_core_0_altera_axi4_master_1_translator_m0_arready),        //                 .arready
		.rid                    (riscv_core_0_altera_axi4_master_1_translator_m0_rid),            //                 .rid
		.rdata                  (riscv_core_0_altera_axi4_master_1_translator_m0_rdata),          //                 .rdata
		.rresp                  (riscv_core_0_altera_axi4_master_1_translator_m0_rresp),          //                 .rresp
		.rlast                  (riscv_core_0_altera_axi4_master_1_translator_m0_rlast),          //                 .rlast
		.rvalid                 (riscv_core_0_altera_axi4_master_1_translator_m0_rvalid),         //                 .rvalid
		.rready                 (riscv_core_0_altera_axi4_master_1_translator_m0_rready),         //                 .rready
		.ruser                  (riscv_core_0_altera_axi4_master_1_translator_m0_ruser),          //                 .ruser
		.wid                    (1'b0)                                                            //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ssram_0_avalon_ssram_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (riscv_core_0_rst_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (ssram_0_avalon_ssram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ssram_0_avalon_ssram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ssram_0_avalon_ssram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ssram_0_avalon_ssram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ssram_0_avalon_ssram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (ssram_0_avalon_ssram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ssram_0_avalon_ssram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ssram_0_avalon_ssram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (ssram_0_avalon_ssram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ssram_0_avalon_ssram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (ssram_0_avalon_ssram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (ssram_0_avalon_ssram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ssram_0_avalon_ssram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (ssram_0_avalon_ssram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (ssram_0_avalon_ssram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (ssram_0_avalon_ssram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ssram_0_avalon_ssram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ssram_0_avalon_ssram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ssram_0_avalon_ssram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ssram_0_avalon_ssram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ssram_0_avalon_ssram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ssram_0_avalon_ssram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ssram_0_avalon_ssram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ssram_0_avalon_ssram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ssram_0_avalon_ssram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ssram_0_avalon_ssram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ssram_0_avalon_ssram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (6),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ssram_0_avalon_ssram_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (riscv_core_0_rst_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (ssram_0_avalon_ssram_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ssram_0_avalon_ssram_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ssram_0_avalon_ssram_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ssram_0_avalon_ssram_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ssram_0_avalon_ssram_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ssram_0_avalon_ssram_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ssram_0_avalon_ssram_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (riscv_core_0_rst_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ssram_0_avalon_ssram_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	platform_mm_interconnect_0_router router (
		.sink_ready         (riscv_core_0_altera_axi4_master_1_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (riscv_core_0_altera_axi4_master_1_agent_write_cp_valid),         //          .valid
		.sink_data          (riscv_core_0_altera_axi4_master_1_agent_write_cp_data),          //          .data
		.sink_startofpacket (riscv_core_0_altera_axi4_master_1_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (riscv_core_0_altera_axi4_master_1_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (riscv_core_0_rst_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (router_src_ready),                                               //       src.ready
		.src_valid          (router_src_valid),                                               //          .valid
		.src_data           (router_src_data),                                                //          .data
		.src_channel        (router_src_channel),                                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                          //          .endofpacket
	);

	platform_mm_interconnect_0_router router_001 (
		.sink_ready         (riscv_core_0_altera_axi4_master_1_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (riscv_core_0_altera_axi4_master_1_agent_read_cp_valid),         //          .valid
		.sink_data          (riscv_core_0_altera_axi4_master_1_agent_read_cp_data),          //          .data
		.sink_startofpacket (riscv_core_0_altera_axi4_master_1_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (riscv_core_0_altera_axi4_master_1_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (riscv_core_0_rst_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //       src.ready
		.src_valid          (router_001_src_valid),                                          //          .valid
		.src_data           (router_001_src_data),                                           //          .data
		.src_channel        (router_001_src_channel),                                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //          .endofpacket
	);

	platform_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (ssram_0_avalon_ssram_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (ssram_0_avalon_ssram_slave_agent_rp_valid),         //          .valid
		.sink_data          (ssram_0_avalon_ssram_slave_agent_rp_data),          //          .data
		.sink_startofpacket (ssram_0_avalon_ssram_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ssram_0_avalon_ssram_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (riscv_core_0_rst_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ssram_0_avalon_ssram_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (riscv_core_0_rst_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ssram_0_avalon_ssram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ssram_0_avalon_ssram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (ssram_0_avalon_ssram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ssram_0_avalon_ssram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ssram_0_avalon_ssram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ssram_0_avalon_ssram_slave_burst_adapter_source0_ready)          //          .ready
	);

	platform_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (riscv_core_0_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                             //      sink.ready
		.sink_channel       (router_src_channel),                           //          .channel
		.sink_data          (router_src_data),                              //          .data
		.sink_startofpacket (router_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_src0_data),                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (riscv_core_0_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                         //      sink.ready
		.sink_channel       (router_001_src_channel),                       //          .channel
		.sink_data          (router_001_src_data),                          //          .data
		.sink_startofpacket (router_001_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_001_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_001_src0_data),                      //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (riscv_core_0_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (riscv_core_0_rst_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.sink_ready         (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                           //          .valid
		.src1_data          (rsp_demux_src1_data),                                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                      //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (riscv_core_0_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                //       clk.clk
		.reset               (riscv_core_0_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (117),
		.IN_PKT_RESPONSE_STATUS_L      (116),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (118),
		.IN_PKT_ORI_BURST_SIZE_H       (120),
		.IN_ST_DATA_W                  (121),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (153),
		.OUT_PKT_RESPONSE_STATUS_L     (152),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (154),
		.OUT_PKT_ORI_BURST_SIZE_H      (156),
		.OUT_ST_DATA_W                 (157),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ssram_0_avalon_ssram_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                  //       clk.clk
		.reset                (riscv_core_0_rst_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (router_002_src_valid),                                           //      sink.valid
		.in_channel           (router_002_src_channel),                                         //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_002_src_ready),                                           //          .ready
		.in_data              (router_002_src_data),                                            //          .data
		.out_endofpacket      (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram_0_avalon_ssram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (153),
		.IN_PKT_RESPONSE_STATUS_L      (152),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (154),
		.IN_PKT_ORI_BURST_SIZE_H       (156),
		.IN_ST_DATA_W                  (157),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (117),
		.OUT_PKT_RESPONSE_STATUS_L     (116),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (118),
		.OUT_PKT_ORI_BURST_SIZE_H      (120),
		.OUT_ST_DATA_W                 (121),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ssram_0_avalon_ssram_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                  //       clk.clk
		.reset                (riscv_core_0_rst_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                              //          .ready
		.in_data              (cmd_mux_src_data),                                               //          .data
		.out_endofpacket      (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ssram_0_avalon_ssram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	platform_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (riscv_core_0_rst_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ssram_0_avalon_ssram_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                          //         .error
	);

endmodule
